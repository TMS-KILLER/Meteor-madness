// NASA API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const NASA_API_KEY = 'ooHgXAVEeyOgGeLh8cC90YBP4gpKwYfNEJKRwN9T';
const NASA_API_URL = 'https://api.nasa.gov/neo/rest/v1/neo/browse';

// –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã NASA:
// - –ó–µ–º–ª—è: NASA Blue Marble (world.topo.bathy)
// - –†–µ–ª—å–µ—Ñ: GEBCO Bathymetry
// - –û–∫–µ–∞–Ω—ã: NASA Earth Observatory
// - –ê—Å—Ç–µ—Ä–æ–∏–¥—ã: NASA —Ç–µ–∫—Å—Ç—É—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let scene, camera, renderer, controls;
let earth, asteroid, impactMarker;
let selectedAsteroid = null;
let impactLocation = { lat: 0, lng: 0 };
let isSimulationRunning = false;
let particles = [];
let explosionParticles = [];
let mapMarker = null;
let crater = null;
let showFallVisualization = false;
let atmosphereGlow = null;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω—ã
    scene = new THREE.Scene();
    scene.background = new THREE.Color(0x000000);

    // –ö–∞–º–µ—Ä–∞
    camera = new THREE.PerspectiveCamera(
        75,
        window.innerWidth / window.innerHeight,
        0.1,
        10000
    );
    camera.position.z = 30;

    // –†–µ–Ω–¥–µ—Ä–µ—Ä
    renderer = new THREE.WebGLRenderer({ antialias: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.shadowMap.enabled = true;
    renderer.shadowMap.type = THREE.PCFSoftShadowMap;
    document.getElementById('canvas-container').appendChild(renderer.domElement);

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä–æ–π
    controls = new THREE.OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.05;
    controls.minDistance = 15;
    controls.maxDistance = 100;

    // –û—Å–≤–µ—â–µ–Ω–∏–µ
    const ambientLight = new THREE.AmbientLight(0x404040, 0.5);
    scene.add(ambientLight);

    const sunLight = new THREE.DirectionalLight(0xffffff, 1.5);
    sunLight.position.set(50, 30, 50);
    sunLight.castShadow = true;
    sunLight.shadow.mapSize.width = 2048;
    sunLight.shadow.mapSize.height = 2048;
    scene.add(sunLight);

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–µ–∑–¥–Ω–æ–≥–æ —Ñ–æ–Ω–∞
    createStarfield();

    // –°–æ–∑–¥–∞–Ω–∏–µ –ó–µ–º–ª–∏
    createEarth();

    // –°–æ–∑–¥–∞–Ω–∏–µ –°–æ–ª–Ω—Ü–∞
    createSun();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
    window.addEventListener('resize', onWindowResize);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö NASA
    await loadNASAData();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    document.getElementById('start-simulation').addEventListener('click', startSimulation);
    document.getElementById('reset-simulation').addEventListener('click', resetSimulation);
    document.getElementById('toggle-visualization').addEventListener('click', toggleVisualization);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    document.getElementById('set-coordinates').addEventListener('click', setCoordinatesFromInput);

    // –°–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
    document.getElementById('loading-screen').classList.add('hidden');

    // –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏
    animate();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –ø–æ–ª—è
function createStarfield() {
    const starsGeometry = new THREE.BufferGeometry();
    const starsMaterial = new THREE.PointsMaterial({
        color: 0xFFFFFF,
        size: 0.5,
        transparent: true,
        opacity: 0.8
    });

    const starsVertices = [];
    for (let i = 0; i < 10000; i++) {
        const x = (Math.random() - 0.5) * 2000;
        const y = (Math.random() - 0.5) * 2000;
        const z = (Math.random() - 0.5) * 2000;
        starsVertices.push(x, y, z);
    }

    starsGeometry.setAttribute('position', new THREE.Float32BufferAttribute(starsVertices, 3));
    const starField = new THREE.Points(starsGeometry, starsMaterial);
    scene.add(starField);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ó–µ–º–ª–∏
function createEarth() {
    const geometry = new THREE.SphereGeometry(10, 64, 64);
    
    // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—É—Ä—ã NASA
    const textureLoader = new THREE.TextureLoader();
    
    // NASA Blue Marble - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –ó–µ–º–ª–∏
    const earthTexture = textureLoader.load('https://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73909/world.topo.bathy.200412.3x5400x2700.jpg');
    
    // NASA Earth Bump Map (—Ä–µ–ª—å–µ—Ñ)
    const bumpTexture = textureLoader.load('https://eoimages.gsfc.nasa.gov/images/imagerecords/73000/73934/gebco_bathy.5400x2700_8bit.jpg');
    
    // NASA Night Lights –¥–ª—è specular (–æ–∫–µ–∞–Ω—ã –æ—Ç—Ä–∞–∂–∞—é—Ç –±–æ–ª—å—à–µ)
    const specularTexture = textureLoader.load('https://eoimages.gsfc.nasa.gov/images/imagerecords/79000/79765/dnb_land_ocean_ice.2012.54000x27000_geo.jpg');

    const material = new THREE.MeshPhongMaterial({
        map: earthTexture,
        bumpMap: bumpTexture,
        bumpScale: 0.3,
        specularMap: specularTexture,
        specular: new THREE.Color(0x333333),
        shininess: 15
    });

    earth = new THREE.Mesh(geometry, material);
    earth.receiveShadow = true;
    scene.add(earth);

    // –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞
    const atmosphereGeometry = new THREE.SphereGeometry(10.5, 64, 64);
    const atmosphereMaterial = new THREE.MeshPhongMaterial({
        color: 0x4488ff,
        transparent: true,
        opacity: 0.15,
        side: THREE.BackSide
    });
    const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
    earth.add(atmosphere);
    
    console.log('üåç –ó–µ–º–ª—è —Å–æ–∑–¥–∞–Ω–∞ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏ NASA');
}

// –°–æ–∑–¥–∞–Ω–∏–µ –°–æ–ª–Ω—Ü–∞
function createSun() {
    const sunGeometry = new THREE.SphereGeometry(5, 32, 32);
    const sunMaterial = new THREE.MeshBasicMaterial({
        color: 0xffff00
    });
    const sun = new THREE.Mesh(sunGeometry, sunMaterial);
    sun.position.set(50, 30, 50);

    const sunLight = new THREE.PointLight(0xffff00, 2, 200);
    sun.add(sunLight);
    scene.add(sun);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö NASA
async function loadNASAData() {
    try {
        const response = await fetch(`${NASA_API_URL}?api_key=${NASA_API_KEY}`);
        const data = await response.json();
        
        const asteroids = data.near_earth_objects.slice(0, 10);
        displayAsteroids(asteroids);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö NASA:', error);
        document.getElementById('asteroid-list').innerHTML = 
            '<p style="color: #ff4444;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.</p>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–≤
function displayAsteroids(asteroids) {
    const container = document.getElementById('asteroid-list');
    container.innerHTML = '';

    asteroids.forEach(asteroid => {
        const card = document.createElement('div');
        card.className = 'asteroid-card';
        
        const diameterMin = asteroid.estimated_diameter.meters.estimated_diameter_min.toFixed(0);
        const diameterMax = asteroid.estimated_diameter.meters.estimated_diameter_max.toFixed(0);
        const isHazardous = asteroid.is_potentially_hazardous_asteroid;

        card.innerHTML = `
            <div class="asteroid-name">
                ${asteroid.name}
                ${isHazardous ? '<span class="hazard-badge">‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–π</span>' : ''}
            </div>
            <div class="asteroid-size">
                –î–∏–∞–º–µ—Ç—Ä: ${diameterMin}-${diameterMax} –º
            </div>
        `;

        card.addEventListener('click', () => selectAsteroid(asteroid, card));
        container.appendChild(card);
    });
}

// –í—ã–±–æ—Ä –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
function selectAsteroid(asteroid, cardElement) {
    // –£–±—Ä–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    document.querySelectorAll('.asteroid-card').forEach(card => {
        card.classList.remove('selected');
    });
    
    cardElement.classList.add('selected');
    selectedAsteroid = asteroid;

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const infoSection = document.getElementById('asteroid-info');
    const detailsDiv = document.getElementById('asteroid-details');
    
    const diameterAvg = (
        (asteroid.estimated_diameter.meters.estimated_diameter_min +
        asteroid.estimated_diameter.meters.estimated_diameter_max) / 2
    ).toFixed(0);

    const velocity = asteroid.close_approach_data && asteroid.close_approach_data[0] 
        ? parseFloat(asteroid.close_approach_data[0].relative_velocity.kilometers_per_second).toFixed(2)
        : '20';

    detailsDiv.innerHTML = `
        <div class="detail-row">
            <span class="detail-label">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
            <span class="detail-value">${asteroid.name}</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–î–∏–∞–º–µ—Ç—Ä:</span>
            <span class="detail-value">${diameterAvg} –º</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–°–∫–æ—Ä–æ—Å—Ç—å:</span>
            <span class="detail-value">${velocity} –∫–º/—Å</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–û–ø–∞—Å–Ω–æ—Å—Ç—å:</span>
            <span class="detail-value">${asteroid.is_potentially_hazardous_asteroid ? '–î–∞' : '–ù–µ—Ç'}</span>
        </div>
    `;

    infoSection.style.display = 'block';

    // –°–æ–∑–¥–∞—Ç—å –∞—Å—Ç–µ—Ä–æ–∏–¥ –≤ —Å—Ü–µ–Ω–µ
    createAsteroidModel(diameterAvg);

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∑–∞–ø—É—Å–∫—É
    checkReadyToStart();
}

// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
function createAsteroidModel(diameter) {
    // –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞—Å—Ç–µ—Ä–æ–∏–¥
    if (asteroid) {
        scene.remove(asteroid);
    }

    const size = diameter / 100; // –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
    const geometry = new THREE.DodecahedronGeometry(size, 1);
    
    const textureLoader = new THREE.TextureLoader();
    
    // NASA —Ç–µ–∫—Å—Ç—É—Ä–∞ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –í–µ—Å—Ç—ã - —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞)
    // –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É –õ—É–Ω—ã NASA –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –≤–∏–¥–∞
    const asteroidTexture = textureLoader.load('https://eoimages.gsfc.nasa.gov/images/imagerecords/57000/57730/vesta_messenger_720.jpg');
    
    const material = new THREE.MeshPhongMaterial({
        map: asteroidTexture,
        bumpMap: asteroidTexture,
        bumpScale: 0.5,
        color: 0x888888
    });

    asteroid = new THREE.Mesh(geometry, material);
    asteroid.position.set(0, 0, 50);
    asteroid.castShadow = true;
    scene.add(asteroid);
    
    console.log(`‚òÑÔ∏è –ê—Å—Ç–µ—Ä–æ–∏–¥ —Å–æ–∑–¥–∞–Ω —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π NASA (–¥–∏–∞–º–µ—Ç—Ä: ${diameter}–º)`);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—Ä—É—á–Ω—É—é
function setCoordinatesFromInput() {
    const latInput = parseFloat(document.getElementById('lat-input').value);
    const lngInput = parseFloat(document.getElementById('lng-input').value);
    
    if (isNaN(latInput) || isNaN(lngInput)) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!');
        return;
    }
    
    if (latInput < -90 || latInput > 90) {
        alert('–®–∏—Ä–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -90 –¥–æ 90');
        return;
    }
    
    if (lngInput < -180 || lngInput > 180) {
        alert('–î–æ–ª–≥–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç -180 –¥–æ 180');
        return;
    }
    
    setImpactLocation(latInput, lngInput);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ó–µ–º–ª–µ - –£–î–ê–õ–ï–ù–û

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—Ç–∞ –ø–∞–¥–µ–Ω–∏—è
function setImpactLocation(lat, lng, point = null) {
    impactLocation = { lat, lng, point };

    // –û–±–Ω–æ–≤–∏—Ç—å UI
    document.getElementById('lat').textContent = lat.toFixed(2) + '¬∞';
    document.getElementById('lng').textContent = lng.toFixed(2) + '¬∞';

    // –ï—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞, —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –µ—ë
    if (!point) {
        // –¢–û–ß–ù–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–∞—Ä—Ç–µ –∏ —Ç–µ–∫—Å—Ç—É—Ä–µ –ó–µ–º–ª–∏
        const latRad = lat * (Math.PI / 180);
        const lngRad = lng * (Math.PI / 180);
        const radius = 10;
        
        point = new THREE.Vector3();
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–º–µ—â–µ–Ω–∏–µ–º –¥–ª—è —Ç–µ–∫—Å—Ç—É—Ä—ã –ó–µ–º–ª–∏
        point.x = radius * Math.cos(latRad) * Math.sin(lngRad + Math.PI);
        point.y = radius * Math.sin(latRad);
        point.z = radius * Math.cos(latRad) * Math.cos(lngRad + Math.PI);
        
        impactLocation.point = point;
        
        console.log(`üéØ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: Lat=${lat.toFixed(4)}¬∞, Lng=${lng.toFixed(4)}¬∞`);
        console.log(`üéØ 3D –ø–æ–∑–∏—Ü–∏—è: X=${point.x.toFixed(4)}, Y=${point.y.toFixed(4)}, Z=${point.z.toFixed(4)}`);
    }

    // –°–æ–∑–¥–∞—Ç—å –º–∞—Ä–∫–µ—Ä - —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if (impactMarker) {
        if (impactMarker.parent) {
            impactMarker.parent.remove(impactMarker);
        }
        scene.remove(impactMarker);
        if (impactMarker.geometry) impactMarker.geometry.dispose();
        if (impactMarker.material) impactMarker.material.dispose();
    }

    const markerGeometry = new THREE.SphereGeometry(0.2, 16, 16);
    const markerMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
    impactMarker = new THREE.Mesh(markerGeometry, markerMaterial);
    impactMarker.position.copy(point).normalize().multiplyScalar(10.1);
    earth.add(impactMarker);

    // –û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
    updateMapMarker(lat, lng);

    checkReadyToStart();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ HTML
window.setImpactLocation = setImpactLocation;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É
function checkReadyToStart() {
    const startButton = document.getElementById('start-simulation');
    if (selectedAsteroid && impactMarker) {
        startButton.disabled = false;
    }
}

// –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
function startSimulation() {
    if (isSimulationRunning) return;
    
    isSimulationRunning = true;
    document.getElementById('start-simulation').disabled = true;

    // –†–∞—Å—á–µ—Ç —ç–Ω–µ—Ä–≥–∏–∏ —É–¥–∞—Ä–∞
    calculateImpact();

    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è
    animateImpact();
}

// –†–∞—Å—á–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —É–¥–∞—Ä–∞
function calculateImpact() {
    const diameter = (
        selectedAsteroid.estimated_diameter.meters.estimated_diameter_min +
        selectedAsteroid.estimated_diameter.meters.estimated_diameter_max
    ) / 2;

    const velocity = selectedAsteroid.close_approach_data && selectedAsteroid.close_approach_data[0]
        ? parseFloat(selectedAsteroid.close_approach_data[0].relative_velocity.kilometers_per_second)
        : 20;

    const mass = (4/3) * Math.PI * Math.pow(diameter/2, 3) * 2500; // –ø–ª–æ—Ç–Ω–æ—Å—Ç—å ~2500 –∫–≥/–º¬≥
    const kineticEnergy = 0.5 * mass * Math.pow(velocity * 1000, 2); // –î–∂–æ—É–ª–∏
    const megatons = kineticEnergy / (4.184 * 10**15); // –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–µ–≥–∞—Ç–æ–Ω–Ω—ã TNT
    const craterDiameter = 1.8 * Math.pow(diameter, 0.78) * Math.pow(velocity, 0.44);

    const impactInfo = document.getElementById('impact-info');
    const impactDetails = document.getElementById('impact-details');
    
    impactDetails.innerHTML = `
        <div class="detail-row">
            <span class="detail-label">–ú–∞—Å—Å–∞:</span>
            <span class="detail-value">${(mass / 1000000).toFixed(2)} —Ç–æ–Ω–Ω</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–≠–Ω–µ—Ä–≥–∏—è —É–¥–∞—Ä–∞:</span>
            <span class="detail-value">${megatons.toFixed(2)} –º–µ–≥–∞—Ç–æ–Ω–Ω TNT</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–î–∏–∞–º–µ—Ç—Ä –∫—Ä–∞—Ç–µ—Ä–∞:</span>
            <span class="detail-value">${craterDiameter.toFixed(0)} –º</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–†–∞–¥–∏—É—Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:</span>
            <span class="detail-value">${(craterDiameter * 2).toFixed(0)} –º</span>
        </div>
    `;

    impactInfo.style.display = 'block';
}

// –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞—Ä–∞
function animateImpact() {
    const startPos = asteroid.position.clone();
    const endPos = impactLocation.point.clone().normalize().multiplyScalar(10);
    const duration = 5000; // 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    const startTime = Date.now();

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
    const diameter = (
        selectedAsteroid.estimated_diameter.meters.estimated_diameter_min +
        selectedAsteroid.estimated_diameter.meters.estimated_diameter_max
    ) / 2;
    
    const velocity = selectedAsteroid.close_approach_data && selectedAsteroid.close_approach_data[0]
        ? parseFloat(selectedAsteroid.close_approach_data[0].relative_velocity.kilometers_per_second)
        : 20;
    
    const craterDiameter = 1.8 * Math.pow(diameter, 0.78) * Math.pow(velocity, 0.44);
    const mass = (4/3) * Math.PI * Math.pow(diameter/2, 3) * 2500;
    const kineticEnergy = 0.5 * mass * Math.pow(velocity * 1000, 2);
    
    // –°–æ–∑–¥–∞–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã –ø—Ä–∏ –≤—Ö–æ–¥–µ
    if (showFallVisualization) {
        createAtmosphericEntry();
    }

    function updateImpact() {
        const elapsed = Date.now() - startTime;
        const progress = Math.min(elapsed / duration, 1);

        // –ö—Ä–∏–≤–∞—è —É—Å–∫–æ—Ä–µ–Ω–∏—è (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è - –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ)
        const easedProgress = 1 - Math.pow(1 - progress, 2);

        asteroid.position.lerpVectors(startPos, endPos, easedProgress);
        
        // –í—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        const rotationSpeed = Math.min(velocity / 10, 0.2);
        asteroid.rotation.x += rotationSpeed;
        asteroid.rotation.y += rotationSpeed * 0.7;

        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è
        if (showFallVisualization) {
            // –°–ª–µ–¥ —Å –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å—é –∑–∞–≤–∏—Å—è—â–µ–π –æ—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ - –±–æ–ª—å—à–µ —á–∞—Å—Ç–∏—Ü
            if (Math.random() > 0.3) {
                createEnhancedTrailParticle(asteroid.position.clone(), velocity, progress);
            }
            
            // –ù–∞–≥—Ä–µ–≤ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30% –ø—É—Ç–∏) - —á–∞—â–µ
            if (progress > 0.7 && Math.random() > 0.4) {
                createAtmosphericHeating(asteroid.position.clone(), progress);
            }
            
            // –£–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞ –ø–µ—Ä–µ–¥ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–º - —Ä–∞–Ω—å—à–µ –∏ —á–∞—â–µ
            if (progress > 0.8 && Math.random() > 0.6) {
                createShockwave(asteroid.position.clone(), endPos, progress);
            }
        } else {
            // –ü—Ä–æ—Å—Ç–æ–π —Å–ª–µ–¥ - —Ç–æ–∂–µ —É–ª—É—á—à–∏–º
            if (Math.random() > 0.5) {
                createTrailParticle(asteroid.position.clone());
            }
        }

        if (progress < 1) {
            requestAnimationFrame(updateImpact);
        } else {
            // –í–∑—Ä—ã–≤ –ø—Ä–∏ —É–¥–∞—Ä–µ
            createRealisticExplosion(endPos, craterDiameter, kineticEnergy, velocity, diameter);
            scene.remove(asteroid);
            asteroid = null;
            
            // –£–¥–∞–ª–∏—Ç—å –≥–µ–æ–º–∞—Ä–∫–µ—Ä –ø–æ—Å–ª–µ —É–¥–∞—Ä–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–û
            if (impactMarker) {
                // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∏–∑ –µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è (earth)
                if (impactMarker.parent) {
                    impactMarker.parent.remove(impactMarker);
                }
                // –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∏–∑ scene –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º
                scene.remove(impactMarker);
                // –û—á–∏—â–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª
                if (impactMarker.geometry) impactMarker.geometry.dispose();
                if (impactMarker.material) impactMarker.material.dispose();
                impactMarker = null;
            }
            
            // –£–±—Ä–∞—Ç—å —Å–≤–µ—á–µ–Ω–∏–µ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã
            if (atmosphereGlow) {
                scene.remove(atmosphereGlow);
                if (atmosphereGlow.geometry) atmosphereGlow.geometry.dispose();
                if (atmosphereGlow.material) atmosphereGlow.material.dispose();
                atmosphereGlow = null;
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø–∞–¥–µ–Ω–∏—è
            showImpactLocationInfo(impactLocation.lat, impactLocation.lng, craterDiameter);
        }
    }

    updateImpact();
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Å—Ç–∏—Ü—ã —Å–ª–µ–¥–∞
function createTrailParticle(position) {
    const geometry = new THREE.SphereGeometry(0.1, 8, 8);
    const material = new THREE.MeshBasicMaterial({
        color: 0xff6600,
        transparent: true,
        opacity: 1
    });
    const particle = new THREE.Mesh(geometry, material);
    particle.position.copy(position);
    scene.add(particle);

    particles.push({ mesh: particle, life: 1 });
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞ —Å–ª–µ–¥–∞ —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
function createEnhancedTrailParticle(position, velocity, progress) {
    const size = 0.15 + (velocity / 80);
    const geometry = new THREE.SphereGeometry(size, 20, 20);
    
    // –¶–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—Å–∫–æ—Ä–æ—Å—Ç–∏) - –±–æ–ª–µ–µ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
    const temperature = velocity * progress;
    let color;
    if (temperature > 30) {
        color = 0xffffff; // –ë–µ–ª—ã–π - –æ—á–µ–Ω—å –≥–æ—Ä—è—á–æ
    } else if (temperature > 20) {
        color = 0xffff88; // –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π - –≥–æ—Ä—è—á–æ
    } else if (temperature > 10) {
        color = 0xff9933; // –Ø—Ä–∫–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π - —Ç–µ–ø–ª–æ
    } else {
        color = 0xff5500; // –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π - –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è
    }
    
    const material = new THREE.MeshBasicMaterial({
        color: color,
        transparent: true,
        opacity: 0.9
    });
    const particle = new THREE.Mesh(geometry, material);
    particle.position.copy(position);
    
    // –î–æ–±–∞–≤–∏—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–≤–µ—á–µ–Ω–∏–µ
    const glowGeometry = new THREE.SphereGeometry(size * 1.5, 16, 16);
    const glowMaterial = new THREE.MeshBasicMaterial({
        color: color,
        transparent: true,
        opacity: 0.3
    });
    const glow = new THREE.Mesh(glowGeometry, glowMaterial);
    particle.add(glow);
    
    scene.add(particle);
    particles.push({ mesh: particle, life: 1.5, enhanced: true });
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤—Ö–æ–¥–∞ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
function createAtmosphericEntry() {
    const glowGeometry = new THREE.SphereGeometry(10.8, 32, 32);
    const glowMaterial = new THREE.MeshBasicMaterial({
        color: 0xff6600,
        transparent: true,
        opacity: 0.1,
        side: THREE.BackSide
    });
    atmosphereGlow = new THREE.Mesh(glowGeometry, glowMaterial);
    scene.add(atmosphereGlow);
}

// –≠—Ñ—Ñ–µ–∫—Ç –Ω–∞–≥—Ä–µ–≤–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
function createAtmosphericHeating(position, progress) {
    const heatIntensity = (progress - 0.7) / 0.3; // –û—Ç 0 –¥–æ 1
    
    for (let i = 0; i < 8; i++) {
        const size = 0.08 + Math.random() * 0.25;
        const geometry = new THREE.SphereGeometry(size, 12, 12);
        
        // –ë–æ–ª–µ–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –Ω–∞–≥—Ä–µ–≤–∞
        const colors = [0xffffff, 0xffff44, 0xff8833, 0xff4411];
        const color = colors[Math.floor(Math.random() * colors.length)];
        
        const material = new THREE.MeshBasicMaterial({
            color: color,
            transparent: true,
            opacity: 0.9
        });
        const heatParticle = new THREE.Mesh(geometry, material);
        
        const offset = new THREE.Vector3(
            (Math.random() - 0.5) * 1.2,
            (Math.random() - 0.5) * 1.2,
            (Math.random() - 0.5) * 1.2
        );
        heatParticle.position.copy(position).add(offset);
        
        // –î–æ–±–∞–≤–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
        const velocity = new THREE.Vector3(
            (Math.random() - 0.5) * 0.05,
            (Math.random() - 0.5) * 0.05,
            (Math.random() - 0.5) * 0.05
        );
        
        scene.add(heatParticle);
        particles.push({ 
            mesh: heatParticle, 
            life: 0.8, 
            isHeat: true,
            velocity: velocity
        });
    }
}

// –£–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞ –ø–µ—Ä–µ–¥ –∞—Å—Ç–µ—Ä–æ–∏–¥–æ–º
function createShockwave(position, target, progress) {
    const direction = new THREE.Vector3().subVectors(target, position).normalize();
    const shockwavePos = position.clone().add(direction.multiplyScalar(2));
    
    const geometry = new THREE.RingGeometry(0.3, 0.5, 32);
    const material = new THREE.MeshBasicMaterial({
        color: 0x88ccff,
        transparent: true,
        opacity: 0.3,
        side: THREE.DoubleSide
    });
    const shockwave = new THREE.Mesh(geometry, material);
    shockwave.position.copy(shockwavePos);
    shockwave.lookAt(target);
    scene.add(shockwave);

    particles.push({ mesh: shockwave, life: 0.3, isShockwave: true });
}

// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–∑—Ä—ã–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö NASA - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
function createRealisticExplosion(position, craterDiameter, kineticEnergy, velocity, diameter) {
    const megatons = kineticEnergy / (4.184 * 10**15);
    
    // –ì–ª–∞–≤–Ω–∞—è –≤—Å–ø—ã—à–∫–∞ - —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —ç–Ω–µ—Ä–≥–∏–∏
    const flashSize = Math.min(3 + (megatons / 50), 12);
    const flashGeometry = new THREE.SphereGeometry(flashSize, 32, 32);
    const flashMaterial = new THREE.MeshBasicMaterial({
        color: 0xffffff,
        transparent: true,
        opacity: 1
    });
    const flash = new THREE.Mesh(flashGeometry, flashMaterial);
    flash.position.copy(position);
    scene.add(flash);

    // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Å–ø—ã—à–∫–∏ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π
    let flashScale = 1;
    let flashPulse = 0;
    const flashInterval = setInterval(() => {
        flashScale += 0.4;
        flashPulse += 0.2;
        const pulse = 1 + Math.sin(flashPulse) * 0.3;
        flash.scale.set(flashScale * pulse, flashScale * pulse, flashScale * pulse);
        flash.material.opacity -= 0.025;

        if (flash.material.opacity <= 0) {
            scene.remove(flash);
            clearInterval(flashInterval);
        }
    }, 40);

    // –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä - –±–æ–ª—å—à–µ —á–∞—Å—Ç–∏—Ü –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    const particleCount = Math.min(200 + Math.floor(diameter / 5), 800);
    
    for (let i = 0; i < particleCount; i++) {
        const particleSize = 0.08 + Math.random() * 0.3;
        const particleGeometry = new THREE.SphereGeometry(particleSize, 12, 12);
        
        // –ë–æ–ª–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤–∑—Ä—ã–≤–∞
        const colors = [0xffffff, 0xffff99, 0xffcc44, 0xff8844, 0xff4422, 0xff1100, 0xcc0000];
        const color = colors[Math.floor(Math.random() * colors.length)];
        
        const particleMaterial = new THREE.MeshBasicMaterial({
            color: color,
            transparent: true,
            opacity: 1
        });
        const particle = new THREE.Mesh(particleGeometry, particleMaterial);
        particle.position.copy(position);

        // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑–ª–µ—Ç–∞
        const explosionSpeed = 0.3 + (velocity / 30);
        const direction = new THREE.Vector3(
            (Math.random() - 0.5) * 2,
            (Math.random() - 0.5) * 2,
            (Math.random() - 0.5) * 2
        ).normalize();
        
        const speed = Math.random() * explosionSpeed + 0.05;
        const velocity3D = direction.multiplyScalar(speed);

        scene.add(particle);
        explosionParticles.push({ 
            mesh: particle, 
            velocity: velocity3D, 
            life: 1.5 + Math.random() * 0.5,
            fadeSpeed: 0.003 + Math.random() * 0.007,
            initialSize: particleSize
        });
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–∫—Ä—ã
    for (let i = 0; i < 50; i++) {
        const sparkGeometry = new THREE.SphereGeometry(0.02 + Math.random() * 0.08, 8, 8);
        const sparkMaterial = new THREE.MeshBasicMaterial({
            color: Math.random() > 0.5 ? 0xffff00 : 0xff4400,
            transparent: true,
            opacity: 1
        });
        const spark = new THREE.Mesh(sparkGeometry, sparkMaterial);
        spark.position.copy(position);

        const sparkVelocity = new THREE.Vector3(
            (Math.random() - 0.5) * 0.8,
            (Math.random() - 0.5) * 0.8,
            (Math.random() - 0.5) * 0.8
        );

        scene.add(spark);
        explosionParticles.push({ 
            mesh: spark, 
            velocity: sparkVelocity, 
            life: 0.8,
            fadeSpeed: 0.02,
            isSpark: true
        });
    }

    // –£–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    createGroundShockwave(position, craterDiameter);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–µ—Ä–∞
    createCrater(position, craterDiameter);
    
    // –ì—Ä–∏–±–æ–≤–∏–¥–Ω–æ–µ –æ–±–ª–∞–∫–æ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —É–¥–∞—Ä–æ–≤
    if (megatons > 1) {
        createMushroomCloud(position, megatons);
    }
    
    // –°–≤–µ—Ç–æ–≤–∞—è –≤–æ–ª–Ω–∞
    createLightWave(position, megatons);
}

// –°–≤–µ—Ç–æ–≤–∞—è –≤–æ–ª–Ω–∞ –æ—Ç –≤–∑—Ä—ã–≤–∞
function createLightWave(position, megatons) {
    const waveSize = Math.min(15 + megatons * 5, 50);
    let currentSize = 2;
    
    const waveInterval = setInterval(() => {
        currentSize += 3;
        
        const waveGeometry = new THREE.SphereGeometry(currentSize, 32, 32);
        const waveMaterial = new THREE.MeshBasicMaterial({
            color: 0xffffaa,
            transparent: true,
            opacity: 0.1,
            side: THREE.BackSide
        });
        const wave = new THREE.Mesh(waveGeometry, waveMaterial);
        wave.position.copy(position);
        scene.add(wave);
        
        explosionParticles.push({ 
            mesh: wave, 
            life: 0.3, 
            isWave: true,
            fadeSpeed: 0.02
        });
        
        if (currentSize >= waveSize) {
            clearInterval(waveInterval);
        }
    }, 80);
}

// –£–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞ –ø–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
function createGroundShockwave(position, craterDiameter) {
    const maxRadius = Math.min(craterDiameter / 200, 3);
    let currentRadius = 0.1;
    
    const shockwaveInterval = setInterval(() => {
        currentRadius += 0.15;
        
        const ringGeometry = new THREE.RingGeometry(currentRadius, currentRadius + 0.2, 64);
        const ringMaterial = new THREE.MeshBasicMaterial({
            color: 0xffaa00,
            transparent: true,
            opacity: 0.6,
            side: THREE.DoubleSide
        });
        const ring = new THREE.Mesh(ringGeometry, ringMaterial);
        ring.position.copy(position).normalize().multiplyScalar(10.01);
        ring.lookAt(0, 0, 0);
        earth.add(ring);
        
        explosionParticles.push({ mesh: ring, life: 0.5, isRing: true, parent: earth });
        
        if (currentRadius >= maxRadius) {
            clearInterval(shockwaveInterval);
        }
    }, 100);
}

// –ì—Ä–∏–±–æ–≤–∏–¥–Ω–æ–µ –æ–±–ª–∞–∫–æ –¥–ª—è –º–æ—â–Ω—ã—Ö –≤–∑—Ä—ã–≤–æ–≤
function createMushroomCloud(position, megatons) {
    const cloudSize = Math.min(1 + megatons / 10, 4);
    const cloudParticles = 50;
    
    for (let i = 0; i < cloudParticles; i++) {
        setTimeout(() => {
            const angle = (i / cloudParticles) * Math.PI * 2;
            const radius = cloudSize * (0.5 + Math.random() * 0.5);
            const height = cloudSize * (1 + Math.random() * 0.5);
            
            const particleGeometry = new THREE.SphereGeometry(0.2 + Math.random() * 0.3, 8, 8);
            const particleMaterial = new THREE.MeshBasicMaterial({
                color: Math.random() > 0.5 ? 0x555555 : 0x888888,
                transparent: true,
                opacity: 0.6
            });
            const cloudParticle = new THREE.Mesh(particleGeometry, particleMaterial);
            
            const offset = position.clone().normalize().multiplyScalar(height);
            cloudParticle.position.copy(position).add(offset);
            cloudParticle.position.x += Math.cos(angle) * radius;
            cloudParticle.position.z += Math.sin(angle) * radius;
            
            scene.add(cloudParticle);
            explosionParticles.push({ 
                mesh: cloudParticle, 
                velocity: new THREE.Vector3(0, 0.02, 0), 
                life: 2,
                isCloud: true,
                fadeSpeed: 0.002
            });
        }, i * 50);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –≤–∑—Ä—ã–≤–∞ - –°–¢–ê–†–ê–Ø –í–ï–†–°–ò–Ø –£–î–ê–õ–ï–ù–ê, –ó–ê–ú–ï–ù–ï–ù–ê –ù–ê createRealisticExplosion

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∫—Ä–∞—Ç–µ—Ä–∞
function createCrater(position, craterDiameterMeters) {
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–∏–∞–º–µ—Ç—Ä –∫—Ä–∞—Ç–µ—Ä–∞ –¥–ª—è 3D –º–æ–¥–µ–ª–∏ (1 –µ–¥–∏–Ω–∏—Ü–∞ = 1000 –∫–º –Ω–∞ –ó–µ–º–ª–µ)
    // –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–æ–¥–µ–ª–∏ = 10 –µ–¥–∏–Ω–∏—Ü, —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å = 6371 –∫–º
    // –ú–∞—Å—à—Ç–∞–±: 1 –µ–¥–∏–Ω–∏—Ü–∞ –º–æ–¥–µ–ª–∏ = 637.1 –∫–º
    const scale = 637100; // –º–µ—Ç—Ä–æ–≤ –≤ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ –º–æ–¥–µ–ª–∏
    const craterRadiusInUnits = (craterDiameterMeters / 2) / scale;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—Ä–∞—Ç–µ—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    const visualRadius = Math.min(Math.max(craterRadiusInUnits * 50, 0.3), 3);
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫—Ä–∞—Ç–µ—Ä–∞
    const craterGroup = new THREE.Group();
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∞—Ç–µ—Ä (—Ç–µ–º–Ω—ã–π –∫—Ä—É–≥)
    const craterGeometry = new THREE.CircleGeometry(visualRadius, 64);
    const craterMaterial = new THREE.MeshPhongMaterial({
        color: 0x1a1a1a,
        transparent: true,
        opacity: 0.9,
        side: THREE.DoubleSide
    });
    const craterMesh = new THREE.Mesh(craterGeometry, craterMaterial);
    craterGroup.add(craterMesh);
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ (–±–æ–ª–µ–µ —Ç–µ–º–Ω–æ–µ)
    const innerRingGeometry = new THREE.RingGeometry(visualRadius * 0.3, visualRadius * 0.6, 64);
    const innerRingMaterial = new THREE.MeshPhongMaterial({
        color: 0x0d0d0d,
        transparent: true,
        opacity: 0.7,
        side: THREE.DoubleSide
    });
    const innerRing = new THREE.Mesh(innerRingGeometry, innerRingMaterial);
    craterGroup.add(innerRing);
    
    // –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ –≤—ã–±—Ä–æ—Å–∞ (—Å–≤–µ—Ç–ª–µ–µ)
    const ejectaRingGeometry = new THREE.RingGeometry(visualRadius, visualRadius * 1.5, 64);
    const ejectaRingMaterial = new THREE.MeshPhongMaterial({
        color: 0x3a3a3a,
        transparent: true,
        opacity: 0.5,
        side: THREE.DoubleSide
    });
    const ejectaRing = new THREE.Mesh(ejectaRingGeometry, ejectaRingMaterial);
    craterGroup.add(ejectaRing);
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—Ä–∞—Ç–µ—Ä –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏
    craterGroup.position.copy(position).normalize().multiplyScalar(10.02);
    craterGroup.lookAt(0, 0, 0);
    
    earth.add(craterGroup);
    crater = craterGroup;
    
    console.log(`–ö—Ä–∞—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω: –¥–∏–∞–º–µ—Ç—Ä ${craterDiameterMeters.toFixed(0)}–º, –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å ${visualRadius.toFixed(2)} –µ–¥–∏–Ω–∏—Ü`);
}

// –°–±—Ä–æ—Å —Å–∏–º—É–ª—è—Ü–∏–∏
function resetSimulation() {
    isSimulationRunning = false;
    
    if (asteroid) {
        scene.remove(asteroid);
        asteroid = null;
    }

    if (impactMarker) {
        // –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if (impactMarker.parent) {
            impactMarker.parent.remove(impactMarker);
        }
        scene.remove(impactMarker);
        if (impactMarker.geometry) impactMarker.geometry.dispose();
        if (impactMarker.material) impactMarker.material.dispose();
        impactMarker = null;
    }

    if (crater) {
        if (crater.parent) {
            crater.parent.remove(crater);
        }
        // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫—Ä–∞—Ç–µ—Ä–∞
        crater.traverse((child) => {
            if (child.geometry) child.geometry.dispose();
            if (child.material) child.material.dispose();
        });
        crater = null;
    }

    particles.forEach(p => scene.remove(p.mesh));
    particles = [];
    explosionParticles.forEach(p => scene.remove(p.mesh));
    explosionParticles = [];

    selectedAsteroid = null;
    impactLocation = { lat: 0, lng: 0 };

    document.getElementById('asteroid-info').style.display = 'none';
    document.getElementById('impact-info').style.display = 'none';
    document.getElementById('lat').textContent = '0¬∞';
    document.getElementById('lng').textContent = '0¬∞';
    document.getElementById('start-simulation').disabled = true;

    // –°–±—Ä–æ—Å–∏—Ç—å –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
    if (mapMarker) {
        mapMarker.remove();
        mapMarker = null;
    }

    document.querySelectorAll('.asteroid-card').forEach(card => {
        card.classList.remove('selected');
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞–¥–µ–Ω–∏—è
function toggleVisualization() {
    showFallVisualization = !showFallVisualization;
    const button = document.getElementById('toggle-visualization');
    
    if (showFallVisualization) {
        button.textContent = 'üî• –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è: –í–ö–õ';
        button.classList.add('active');
    } else {
        button.textContent = 'üî• –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–¥–µ–Ω–∏—è: –í–´–ö–õ';
        button.classList.remove('active');
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
function updateMapMarker(lat, lng) {
    if (!window.mapInitialized) return;
    
    if (mapMarker) {
        mapMarker.setLatLng([lat, lng]);
    } else {
        mapMarker = L.marker([lat, lng], {
            icon: L.icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            })
        }).addTo(window.map);
        mapMarker.bindPopup('–ú–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è').openPopup();
    }
    
    window.map.setView([lat, lng], 5);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
function updateParticles() {
    // –°–ª–µ–¥
    particles.forEach((particle, index) => {
        particle.life -= particle.enhanced ? 0.012 : 0.02;
        particle.mesh.material.opacity = particle.life;
        
        if (particle.isHeat) {
            particle.mesh.position.y += 0.02; // –ü–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö –±—ã—Å—Ç—Ä–µ–µ
            if (particle.velocity) {
                particle.mesh.position.add(particle.velocity);
            }
        }
        
        if (!particle.isShockwave) {
            particle.mesh.scale.multiplyScalar(0.97);
        }

        if (particle.life <= 0) {
            scene.remove(particle.mesh);
            particles.splice(index, 1);
        }
    });

    // –í–∑—Ä—ã–≤
    explosionParticles.forEach((particle, index) => {
        if (particle.velocity) {
            particle.mesh.position.add(particle.velocity);
            // –î–æ–±–∞–≤–∏—Ç—å –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é –¥–ª—è —á–∞—Å—Ç–∏—Ü –≤–∑—Ä—ã–≤–∞
            if (!particle.isSpark && !particle.isWave) {
                particle.velocity.y -= 0.001;
            }
        }
        
        const fadeSpeed = particle.fadeSpeed || 0.01;
        particle.life -= fadeSpeed;
        particle.mesh.material.opacity = Math.max(0, particle.life);
        
        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —á–∞—Å—Ç–∏—Ü —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
        if (particle.initialSize && particle.life < 0.5) {
            const scale = particle.life * 2;
            particle.mesh.scale.set(scale, scale, scale);
        }

        if (particle.life <= 0) {
            if (particle.parent) {
                particle.parent.remove(particle.mesh);
            } else {
                scene.remove(particle.mesh);
            }
            explosionParticles.splice(index, 1);
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø–∞–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞—Ä–∞
function showImpactLocationInfo(lat, lng, craterDiameter) {
    const impactDetails = document.getElementById('impact-details');
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–≥–∏–æ–Ω
    let locationName = getLocationName(lat, lng);
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
    let terrainType = getTerrainType(lat, lng);
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—à–∞—Ä–∏—è
    let hemisphere = getHemisphere(lat, lng);
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–æ–Ω—É
    let climateZone = getClimateZone(lat);
    
    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
    let timeZone = Math.round(lng / 15);
    let timeZoneStr = `UTC${timeZone >= 0 ? '+' : ''}${timeZone}`;
    
    // –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø–∞–¥–µ–Ω–∏—è
    const locationInfo = `
        <div class="detail-row" style="border-top: 2px solid #4CAF50; margin-top: 10px; padding-top: 10px;">
            <span class="detail-label">üìç –ú–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è:</span>
            <span class="detail-value">${locationName}</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</span>
            <span class="detail-value">${lat.toFixed(4)}¬∞ ${lat >= 0 ? '–°.–®.' : '–Æ.–®.'}, ${lng.toFixed(4)}¬∞ ${lng >= 0 ? '–í.–î.' : '–ó.–î.'}</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–ü–æ–ª—É—à–∞—Ä–∏—è:</span>
            <span class="detail-value">${hemisphere}</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–¢–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏:</span>
            <span class="detail-value">${terrainType}</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–æ–Ω–∞:</span>
            <span class="detail-value">${climateZone}</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</span>
            <span class="detail-value">${timeZoneStr}</span>
        </div>
        <div class="detail-row">
            <span class="detail-label">–ü–ª–æ—â–∞–¥—å –ø–æ—Ä–∞–∂–µ–Ω–∏—è:</span>
            <span class="detail-value">~${(Math.PI * Math.pow(craterDiameter * 2, 2) / 1000000).toFixed(2)} –∫–º¬≤</span>
        </div>
    `;
    
    impactDetails.innerHTML += locationInfo;
    
    console.log(`üí• –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–¥–µ–Ω–∏–∏:`);
    console.log(`   –†–µ–≥–∏–æ–Ω: ${locationName}`);
    console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat.toFixed(4)}¬∞, ${lng.toFixed(4)}¬∞`);
    console.log(`   –ú–µ—Å—Ç–Ω–æ—Å—Ç—å: ${terrainType}`);
    console.log(`   –ö–ª–∏–º–∞—Ç: ${climateZone}`);
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
function getTerrainType(lat, lng) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–µ–∞–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    const isOcean = 
        (lng > -180 && lng < -80 && lat > -60 && lat < 60) || // –¢–∏—Ö–∏–π
        (lng > -80 && lng < 20 && lat > -60 && lat < 60) || // –ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π
        (lng > 20 && lng < 120 && lat > -60 && lat < 30) || // –ò–Ω–¥–∏–π—Å–∫–∏–π
        (lat > 60) || // –°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π
        (lat < -60); // –Æ–∂–Ω—ã–π
    
    if (isOcean) return "üåä –û–∫–µ–∞–Ω/–ú–æ—Ä–µ";
    
    // –ì–æ—Ä–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã
    if ((lat > 25 && lat < 40 && lng > 70 && lng < 105) || // –ì–∏–º–∞–ª–∞–∏
        (lat > 35 && lat < 50 && lng > -125 && lng < -100) || // –°–∫–∞–ª–∏—Å—Ç—ã–µ –≥–æ—Ä—ã
        (lat > -40 && lat < -20 && lng > -75 && lng < -65)) { // –ê–Ω–¥—ã
        return "‚õ∞Ô∏è –ì–æ—Ä–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å";
    }
    
    // –ü—É—Å—Ç—ã–Ω–∏
    if ((lat > 15 && lat < 35 && lng > -10 && lng < 35) || // –°–∞—Ö–∞—Ä–∞
        (lat > 25 && lat < 40 && lng > 40 && lng < 65) || // –ê—Ä–∞–≤–∏–π—Å–∫–∞—è
        (lat > -30 && lat < -20 && lng > 115 && lng < 140)) { // –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∞—è
        return "üèúÔ∏è –ü—É—Å—Ç—ã–Ω—è";
    }
    
    // –¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ –ª–µ—Å–∞
    if ((lat > -10 && lat < 10 && lng > -80 && lng < -40) || // –ê–º–∞–∑–æ–Ω–∏—è
        (lat > -5 && lat < 5 && lng > 10 && lng < 30)) { // –ö–æ–Ω–≥–æ
        return "üå¥ –¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –ª–µ—Å";
    }
    
    // –¢—É–Ω–¥—Ä–∞/–ê—Ä–∫—Ç–∏–∫–∞
    if (lat > 66 || lat < -66) return "‚ùÑÔ∏è –¢—É–Ω–¥—Ä–∞/–ü–æ–ª—è—Ä–Ω–∞—è –æ–±–ª–∞—Å—Ç—å";
    
    // –õ–µ—Å–Ω–∞—è –∑–æ–Ω–∞
    if (lat > 45 && lat < 66) return "üå≤ –õ–µ—Å–Ω–∞—è –∑–æ–Ω–∞ (—Ç–∞–π–≥–∞)";
    
    // –°—Ç–µ–ø—å/–†–∞–≤–Ω–∏–Ω–∞
    if (lat > 30 && lat < 50) return "üåæ –°—Ç–µ–ø—å/–†–∞–≤–Ω–∏–Ω–∞";
    
    return "üèûÔ∏è –†–∞–≤–Ω–∏–Ω–Ω–∞—è –º–µ—Å—Ç–Ω–æ—Å—Ç—å";
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—à–∞—Ä–∏—è
function getHemisphere(lat, lng) {
    const ns = lat >= 0 ? "–°–µ–≤–µ—Ä–Ω–æ–µ" : "–Æ–∂–Ω–æ–µ";
    const ew = lng >= 0 ? "–í–æ—Å—Ç–æ—á–Ω–æ–µ" : "–ó–∞–ø–∞–¥–Ω–æ–µ";
    return `${ns}, ${ew}`;
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫—É—é –∑–æ–Ω—É
function getClimateZone(lat) {
    const absLat = Math.abs(lat);
    
    if (absLat > 66.5) return "‚ùÑÔ∏è –ü–æ–ª—è—Ä–Ω—ã–π –∫–ª–∏–º–∞—Ç";
    if (absLat > 60) return "üå®Ô∏è –°—É–±–ø–æ–ª—è—Ä–Ω—ã–π –∫–ª–∏–º–∞—Ç";
    if (absLat > 45) return "üå°Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–ª–∏–º–∞—Ç";
    if (absLat > 30) return "üå§Ô∏è –°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–ª–∏–º–∞—Ç";
    if (absLat > 23.5) return "üåû –¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–π –∫–ª–∏–º–∞—Ç";
    return "‚òÄÔ∏è –≠–∫–≤–∞—Ç–æ—Ä–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–º–∞—Ç";
}

// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
function getLocationName(lat, lng) {
    // –°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
    if (lat > 15 && lat < 72 && lng > -170 && lng < -52) {
        // –ö–∞–Ω–∞–¥–∞
        if (lat > 49 && lng > -141 && lng < -53) {
            if (lng > -95) return "–í–æ—Å—Ç–æ—á–Ω–∞—è –ö–∞–Ω–∞–¥–∞";
            if (lng > -120) return "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ö–∞–Ω–∞–¥–∞ (–ü—Ä–µ—Ä–∏–∏)";
            return "–ó–∞–ø–∞–¥–Ω–∞—è –ö–∞–Ω–∞–¥–∞";
        }
        // –°–®–ê
        if (lat > 24 && lat < 49 && lng > -125 && lng < -66) {
            if (lng > -80) return "–í–æ—Å—Ç–æ—á–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ –°–®–ê";
            if (lng > -95) return "–°—Ä–µ–¥–Ω–∏–π –ó–∞–ø–∞–¥ –°–®–ê";
            if (lng > -110) return "–í–µ–ª–∏–∫–∏–µ —Ä–∞–≤–Ω–∏–Ω—ã –°–®–ê";
            return "–ó–∞–ø–∞–¥–Ω–æ–µ –ø–æ–±–µ—Ä–µ–∂—å–µ –°–®–ê";
        }
        // –ú–µ–∫—Å–∏–∫–∞ –∏ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞
        if (lat > 15 && lng > -118 && lng < -86) return "–ú–µ–∫—Å–∏–∫–∞";
        if (lat > 7 && lng > -92 && lng < -77) return "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞";
        return "–°–µ–≤–µ—Ä–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞";
    }
    
    // –Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
    if (lat > -55 && lat < 15 && lng > -81 && lng < -34) {
        if (lat > -5 && lng > -80 && lng < -66) return "–ö–æ–ª—É–º–±–∏—è/–í–µ–Ω–µ—Å—É—ç–ª–∞";
        if (lat > -18 && lng > -77 && lng < -48) return "–ë—Ä–∞–∑–∏–ª–∏—è";
        if (lat > -35 && lat < -18 && lng > -70 && lng < -53) return "–ê—Ä–≥–µ–Ω—Ç–∏–Ω–∞";
        if (lat > -25 && lng > -75 && lng < -66) return "–ü–µ—Ä—É/–ë–æ–ª–∏–≤–∏—è";
        if (lat > -40 && lng > -75 && lng < -66) return "–ß–∏–ª–∏";
        return "–Æ–∂–Ω–∞—è –ê–º–µ—Ä–∏–∫–∞";
    }
    
    // –ï–≤—Ä–æ–ø–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
    if (lat > 35 && lat < 72 && lng > -25 && lng < 45) {
        if (lat > 66) return "–°–µ–≤–µ—Ä–Ω–∞—è –°–∫–∞–Ω–¥–∏–Ω–∞–≤–∏—è";
        if (lat > 55 && lng > 10 && lng < 32) return "–°–∫–∞–Ω–¥–∏–Ω–∞–≤–∏—è (–®–≤–µ—Ü–∏—è/–ù–æ—Ä–≤–µ–≥–∏—è)";
        if (lat > 55 && lng > -10 && lng < 10) return "–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–µ –æ—Å—Ç—Ä–æ–≤–∞";
        if (lat > 50 && lng > 5 && lng < 15) return "–ì–µ—Ä–º–∞–Ω–∏—è";
        if (lat > 45 && lng > -5 && lng < 8) return "–§—Ä–∞–Ω—Ü–∏—è";
        if (lat > 40 && lng > 8 && lng < 19) return "–ò—Ç–∞–ª–∏—è";
        if (lat > 36 && lng > -10 && lng < 5) return "–ò—Å–ø–∞–Ω–∏—è/–ü–æ—Ä—Ç—É–≥–∞–ª–∏—è";
        if (lat > 40 && lng > 19 && lng < 30) return "–ë–∞–ª–∫–∞–Ω—ã";
        if (lat > 45 && lng > 15 && lng < 30) return "–í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞";
        if (lat > 50 && lng > 20 && lng < 40) return "–í–æ—Å—Ç–æ—á–Ω–∞—è –ï–≤—Ä–æ–ø–∞ (–ü–æ–ª—å—à–∞/–£–∫—Ä–∞–∏–Ω–∞)";
        return "–ï–≤—Ä–æ–ø–∞";
    }
    
    // –†–æ—Å—Å–∏—è
    if (lat > 40 && lat < 80 && lng > 25 && lng < 180) {
        if (lng < 60) return "–ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —á–∞—Å—Ç—å –†–æ—Å—Å–∏–∏";
        if (lng < 100) return "–ó–∞–ø–∞–¥–Ω–∞—è –°–∏–±–∏—Ä—å";
        if (lng < 140) return "–í–æ—Å—Ç–æ—á–Ω–∞—è –°–∏–±–∏—Ä—å";
        return "–î–∞–ª—å–Ω–∏–π –í–æ—Å—Ç–æ–∫ –†–æ—Å—Å–∏–∏";
    }
    
    // –ê–∑–∏—è - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
    if (lat > -10 && lat < 80 && lng > 45 && lng < 180) {
        // –ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫
        if (lat > 12 && lat < 42 && lng > 34 && lng < 65) return "–ë–ª–∏–∂–Ω–∏–π –í–æ—Å—Ç–æ–∫";
        // –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è
        if (lat > 35 && lat < 50 && lng > 50 && lng < 90) return "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê–∑–∏—è";
        // –Æ–∂–Ω–∞—è –ê–∑–∏—è
        if (lat > 5 && lat < 35 && lng > 65 && lng < 95) return "–Æ–∂–Ω–∞—è –ê–∑–∏—è (–ò–Ω–¥–∏—è/–ü–∞–∫–∏—Å—Ç–∞–Ω)";
        // –Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è
        if (lat > -10 && lat < 25 && lng > 95 && lng < 115) return "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è";
        // –í–æ—Å—Ç–æ—á–Ω–∞—è –ê–∑–∏—è
        if (lat > 20 && lat < 50 && lng > 100 && lng < 145) {
            if (lng > 130) return "–Ø–ø–æ–Ω–∏—è";
            if (lat > 35) return "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –ö–∏—Ç–∞–π";
            return "–í–æ—Å—Ç–æ—á–Ω—ã–π –ö–∏—Ç–∞–π";
        }
        return "–ê–∑–∏—è";
    }
    
    // –ê—Ñ—Ä–∏–∫–∞ - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
    if (lat > -35 && lat < 37 && lng > -18 && lng < 50) {
        if (lat > 20 && lng > -10 && lng < 32) return "–°–µ–≤–µ—Ä–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞ (–°–∞—Ö–∞—Ä–∞)";
        if (lat > 15 && lng > 30 && lng < 50) return "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞";
        if (lat > -10 && lat < 15 && lng > 10 && lng < 40) return "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞";
        if (lat > -35 && lat < -10 && lng > 15 && lng < 40) return "–Æ–∂–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞";
        if (lat > -5 && lng > -18 && lng < 15) return "–ó–∞–ø–∞–¥–Ω–∞—è –ê—Ñ—Ä–∏–∫–∞";
        return "–ê—Ñ—Ä–∏–∫–∞";
    }
    
    // –ê–≤—Å—Ç—Ä–∞–ª–∏—è –∏ –û–∫–µ–∞–Ω–∏—è
    if (lat > -50 && lat < -10 && lng > 110 && lng < 180) {
        if (lng > 140 && lat > -30) return "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–≤—Å—Ç—Ä–∞–ª–∏—è";
        if (lng < 130) return "–ó–∞–ø–∞–¥–Ω–∞—è –ê–≤—Å—Ç—Ä–∞–ª–∏—è";
        return "–ê–≤—Å—Ç—Ä–∞–ª–∏—è";
    }
    
    // –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞
    if (lat < -60) {
        if (lng > -60 && lng < 20) return "–ó–∞–ø–∞–¥–Ω–∞—è –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞";
        return "–í–æ—Å—Ç–æ—á–Ω–∞—è –ê–Ω—Ç–∞—Ä–∫—Ç–∏–¥–∞";
    }
    
    // –û–∫–µ–∞–Ω—ã - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞
    if (lng > -180 && lng < -80 && lat > -60 && lat < 60) return "–¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω";
    if (lng > -80 && lng < 20 && lat > -60 && lat < 60) return "–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ–∫–µ–∞–Ω";
    if (lng > 20 && lng < 120 && lat > -60 && lat < 30) return "–ò–Ω–¥–∏–π—Å–∫–∏–π –æ–∫–µ–∞–Ω";
    if (lat > 60) return "–°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π –æ–∫–µ–∞–Ω";
    if (lat < -60) return "–Æ–∂–Ω—ã–π –æ–∫–µ–∞–Ω";
    
    return "–ú–∏—Ä–æ–≤–æ–π –æ–∫–µ–∞–Ω";
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
function onWindowResize() {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
}

// –ê–Ω–∏–º–∞—Ü–∏—è
function animate() {
    requestAnimationFrame(animate);

    // –í—Ä–∞—â–µ–Ω–∏–µ –ó–µ–º–ª–∏
    earth.rotation.y += 0.001;

    // –í—Ä–∞—â–µ–Ω–∏–µ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞
    if (asteroid && !isSimulationRunning) {
        asteroid.rotation.x += 0.01;
        asteroid.rotation.y += 0.02;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏—Ü
    updateParticles();

    controls.update();
    renderer.render(scene, camera);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', init);
