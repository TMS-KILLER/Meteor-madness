// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞ (—Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏, –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã)
function createStarfield() {
    // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —è—Ä–∫–æ—Å—Ç–∏
    const starGeometry = new THREE.BufferGeometry();
    const starCount = 10000;
    const positions = new Float32Array(starCount * 3);
    const colors = new Float32Array(starCount * 3);
    const sizes = new Float32Array(starCount);

    for (let i = 0; i < starCount; i++) {
        // –ü–æ–∑–∏—Ü–∏–∏ –∑–≤–µ–∑–¥
        positions[i * 3] = (Math.random() - 0.5) * 2000;
        positions[i * 3 + 1] = (Math.random() - 0.5) * 2000;
        positions[i * 3 + 2] = (Math.random() - 0.5) * 2000;
        
        // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∑–≤–µ–∑–¥ (–±–µ–ª—ã–µ, —Å–∏–Ω–∏–µ, –∂–µ–ª—Ç—ã–µ)
        const colorChoice = Math.random();
        if (colorChoice < 0.7) {
            // –ë–µ–ª—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 1;
            colors[i * 3 + 1] = 1;
            colors[i * 3 + 2] = 1;
        } else if (colorChoice < 0.85) {
            // –ñ–µ–ª—Ç–æ–≤–∞—Ç—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 1;
            colors[i * 3 + 1] = 0.9;
            colors[i * 3 + 2] = 0.7;
        } else {
            // –°–∏–Ω–µ–≤–∞—Ç—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 0.7;
            colors[i * 3 + 1] = 0.8;
            colors[i * 3 + 2] = 1;
        }
        
        // –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        sizes[i] = Math.random() * 2 + 0.5;
    }

    starGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    starGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
    starGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));

    const starMaterial = new THREE.PointsMaterial({
        size: 2,
        vertexColors: true,
        transparent: true,
        opacity: 0.9,
        sizeAttenuation: true
    });

    const stars = new THREE.Points(starGeometry, starMaterial);
    scene.add(stars);

    return stars;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ó–µ–º–ª–∏
function createEarth() {
    const geometry = new THREE.SphereGeometry(10, 64, 64);
    
    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –ó–µ–º–ª–∏ –æ—Ç NASA Blue Marble
    const textureLoader = new THREE.TextureLoader();
    const earthTexture = textureLoader.load(
        'textures/earth.jpg',
        () => console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –ó–µ–º–ª–∏ –æ—Ç NASA –∑–∞–≥—Ä—É–∂–µ–Ω–∞'),
        undefined,
        (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –ó–µ–º–ª–∏:', error);
            // Fallback - –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
            earth.material = new THREE.MeshPhongMaterial({
                color: 0x2233ff,
                specular: new THREE.Color(0x333333),
                shininess: 15
            });
        }
    );

    const material = new THREE.MeshPhongMaterial({
        map: earthTexture,
        specular: new THREE.Color(0x333333),
        shininess: 15
    });

    earth = new THREE.Mesh(geometry, material);
    earth.receiveShadow = true;
    
    // –ù–ï –ü–û–í–û–†–ê–ß–ò–í–ê–ï–ú –ó–µ–º–ª—é - –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—É–ª—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    // –¢–µ–∫—Å—Ç—É—Ä–∞ –≤—ã—Ä–æ–≤–Ω–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ: 0¬∞ –¥–æ–ª–≥–æ—Ç—ã –ø–æ –æ—Å–∏ -Z
    
    console.log('üåç Earth created with standard texture alignment');
    
    scene.add(earth);

    // –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞
    const atmosphereGeometry = new THREE.SphereGeometry(10.5, 64, 64);
    const atmosphereMaterial = new THREE.MeshPhongMaterial({
        color: 0x4488ff,
        transparent: true,
        opacity: 0.15,
        side: THREE.BackSide
    });
    const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
    earth.add(atmosphere);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –°–æ–ª–Ω—Ü–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π
function createSun() {
    const sunGeometry = new THREE.SphereGeometry(5, 32, 32);
    
    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –°–æ–ª–Ω—Ü–∞ –æ—Ç NASA SDO
    const sunTexture = new THREE.TextureLoader().load(
        'textures/sun.jpg',
        () => {
            console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –°–æ–ª–Ω—Ü–∞ –æ—Ç NASA SDO –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        },
        undefined,
        (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –°–æ–ª–Ω—Ü–∞:', error);
            // Fallback - —è—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
            mesh.material = new THREE.MeshBasicMaterial({
                color: 0xffaa00,
                emissive: 0xff6600,
                emissiveIntensity: 0.5
            });
        }
    );
    
    const sunMaterial = new THREE.MeshBasicMaterial({
        map: sunTexture,
        color: 0xffff00
    });
    const mesh = new THREE.Mesh(sunGeometry, sunMaterial);
    mesh.position.set(50, 30, 50);

    const sunLight = new THREE.PointLight(0xffff00, 2, 200);
    mesh.add(sunLight);
    scene.add(mesh);
}
