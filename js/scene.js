// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞ (—Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏, –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã)
function createStarfield() {
    // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —è—Ä–∫–æ—Å—Ç–∏
    const starGeometry = new THREE.BufferGeometry();
    const starCount = 10000;
    const positions = new Float32Array(starCount * 3);
    const colors = new Float32Array(starCount * 3);
    const sizes = new Float32Array(starCount);

    for (let i = 0; i < starCount; i++) {
        // –ü–æ–∑–∏—Ü–∏–∏ –∑–≤–µ–∑–¥
        positions[i * 3] = (Math.random() - 0.5) * 2000;
        positions[i * 3 + 1] = (Math.random() - 0.5) * 2000;
        positions[i * 3 + 2] = (Math.random() - 0.5) * 2000;
        
        // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∑–≤–µ–∑–¥ (–±–µ–ª—ã–µ, —Å–∏–Ω–∏–µ, –∂–µ–ª—Ç—ã–µ)
        const colorChoice = Math.random();
        if (colorChoice < 0.7) {
            // –ë–µ–ª—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 1;
            colors[i * 3 + 1] = 1;
            colors[i * 3 + 2] = 1;
        } else if (colorChoice < 0.85) {
            // –ñ–µ–ª—Ç–æ–≤–∞—Ç—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 1;
            colors[i * 3 + 1] = 0.9;
            colors[i * 3 + 2] = 0.7;
        } else {
            // –°–∏–Ω–µ–≤–∞—Ç—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 0.7;
            colors[i * 3 + 1] = 0.8;
            colors[i * 3 + 2] = 1;
        }
        
        // –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        sizes[i] = Math.random() * 2 + 0.5;
    }

    starGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    starGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
    starGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));

    const starMaterial = new THREE.PointsMaterial({
        size: 2,
        vertexColors: true,
        transparent: true,
        opacity: 0.9,
        sizeAttenuation: true
    });

    const stars = new THREE.Points(starGeometry, starMaterial);
    scene.add(stars);

    return stars;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ó–µ–º–ª–∏
function createEarth() {
    const geometry = new THREE.SphereGeometry(10, 64, 64);
    
    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –ó–µ–º–ª–∏ –æ—Ç NASA Blue Marble
    const textureLoader = new THREE.TextureLoader();
    const earthTexture = textureLoader.load(
        'textures/earth.jpg',
        () => {
            console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –ó–µ–º–ª–∏ –æ—Ç NASA –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
            console.log('üìê Texture alignment: 0¬∞ longitude = -Z axis (Greenwich Meridian)');
        },
        undefined,
        (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –ó–µ–º–ª–∏:', error);
            // Fallback - –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
            earth.material = new THREE.MeshPhongMaterial({
                color: 0x2233ff,
                specular: new THREE.Color(0x333333),
                shininess: 15
            });
        }
    );
    
    // –í–ê–ñ–ù–û: –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞
    // –¢–µ–∫—Å—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å equirectangular (—Ä–∞–≤–Ω–æ–ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è)
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ NASA Blue Marble:
    // - –¶–µ–Ω—Ç—Ä —Ç–µ–∫—Å—Ç—É—Ä—ã (u=0.5) = –¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω (~180¬∞ –¥–æ–ª–≥–æ—Ç—ã)
    // - –õ–µ–≤—ã–π –∫—Ä–∞–π (u=0) = –ê—Ç–ª–∞–Ω—Ç–∏–∫–∞ (~0¬∞ –¥–æ–ª–≥–æ—Ç—ã)
    // - –ü—Ä–∞–≤—ã–π –∫—Ä–∞–π (u=1) = –ê—Ç–ª–∞–Ω—Ç–∏–∫–∞ (~360¬∞=0¬∞ –¥–æ–ª–≥–æ—Ç—ã)
    
    // Three.js –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
    // - –ü—Ä–∏ u=0: –¥–æ–ª–≥–æ—Ç–∞ = -180¬∞ (Western edge)
    // - –ü—Ä–∏ u=0.5: –¥–æ–ª–≥–æ—Ç–∞ = 0¬∞ (Greenwich - –ø–µ—Ä–µ–¥–Ω—è—è —Å—Ç–æ—Ä–æ–Ω–∞ —Å—Ñ–µ—Ä—ã -Z)
    // - –ü—Ä–∏ u=1: –¥–æ–ª–≥–æ—Ç–∞ = +180¬∞ (Eastern edge)
    
    // –ü–†–û–ë–õ–ï–ú–ê: NASA —Ç–µ–∫—Å—Ç—É—Ä–∞ –∏–º–µ–µ—Ç –¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ, –∞ –Ω–µ –ê—Ç–ª–∞–Ω—Ç–∏–∫—É!
    // –†–ï–®–ï–ù–ò–ï: –°–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É –Ω–∞ 0.5 (180¬∞)
    earthTexture.wrapS = THREE.RepeatWrapping;
    earthTexture.wrapT = THREE.ClampToEdgeWrapping;
    earthTexture.offset.x = 0.5; // –°–º–µ—â–µ–Ω–∏–µ –Ω–∞ 180¬∞ - —Ç–µ–ø–µ—Ä—å –ì—Ä–∏–Ω–≤–∏—á –Ω–∞ -Z –æ—Å–∏

    const material = new THREE.MeshPhongMaterial({
        map: earthTexture,
        specular: new THREE.Color(0x333333),
        shininess: 15
    });

    earth = new THREE.Mesh(geometry, material);
    earth.receiveShadow = true;
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ù–ï –≤—Ä–∞—â–∞–µ–º –ó–µ–º–ª—é –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏!
    // –° offset.x = 0.5 —Ç–µ–∫—Å—Ç—É—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—Ä–æ–≤–Ω–µ–Ω–∞:
    // - 0¬∞ –¥–æ–ª–≥–æ—Ç—ã (Greenwich) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ -Z –æ—Å—å
    // - 90¬∞ –≤.–¥. (–ò–Ω–¥–∏—è) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ +X –æ—Å—å  
    // - 180¬∞ –¥–æ–ª–≥–æ—Ç—ã (–¢–∏—Ö–∏–π –æ–∫–µ–∞–Ω) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ +Z –æ—Å—å
    // - 90¬∞ –∑.–¥. (–°–®–ê) –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ -X –æ—Å—å
    earth.rotation.y = 0;
    
    console.log('üåç Earth created with corrected texture alignment:');
    console.log('   ‚úÖ Texture offset: 0.5 (180¬∞ shift)');
    console.log('   0¬∞ Long (Greenwich) ‚Üí -Z axis');
    console.log('   90¬∞ E (India) ‚Üí +X axis');
    console.log('   180¬∞ Long (Pacific) ‚Üí +Z axis');
    console.log('   90¬∞ W (Americas) ‚Üí -X axis');
    console.log('   üìç Moscow (37.6¬∞E, 55.8¬∞N) should align perfectly');
    
    scene.add(earth);

    // –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞
    const atmosphereGeometry = new THREE.SphereGeometry(10.5, 64, 64);
    const atmosphereMaterial = new THREE.MeshPhongMaterial({
        color: 0x4488ff,
        transparent: true,
        opacity: 0.15,
        side: THREE.BackSide
    });
    const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
    earth.add(atmosphere);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –°–æ–ª–Ω—Ü–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π —Ç–µ–∫—Å—Ç—É—Ä–æ–π
function createSun() {
    const sunGeometry = new THREE.SphereGeometry(5, 32, 32);
    
    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –°–æ–ª–Ω—Ü–∞ –æ—Ç NASA SDO
    const sunTexture = new THREE.TextureLoader().load(
        'textures/sun.jpg',
        () => {
            console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –°–æ–ª–Ω—Ü–∞ –æ—Ç NASA SDO –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        },
        undefined,
        (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –°–æ–ª–Ω—Ü–∞:', error);
            // Fallback - —è—Ä–∫–∏–π –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
            mesh.material = new THREE.MeshBasicMaterial({
                color: 0xffaa00,
                emissive: 0xff6600,
                emissiveIntensity: 0.5
            });
        }
    );
    
    const sunMaterial = new THREE.MeshBasicMaterial({
        map: sunTexture,
        color: 0xffff00
    });
    const mesh = new THREE.Mesh(sunGeometry, sunMaterial);
    mesh.position.set(50, 30, 50);

    const sunLight = new THREE.PointLight(0xffff00, 2, 200);
    mesh.add(sunLight);
    scene.add(mesh);
}
