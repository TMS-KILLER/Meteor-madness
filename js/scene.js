// –°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–µ–∑–¥–Ω–æ–≥–æ –Ω–µ–±–∞ (—Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏, –±–µ–∑ —Ç–µ–∫—Å—Ç—É—Ä—ã)
function createStarfield() {
    // –°–æ–∑–¥–∞–µ–º –∑–≤–µ–∑–¥—ã —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ —è—Ä–∫–æ—Å—Ç–∏
    const starGeometry = new THREE.BufferGeometry();
    const starCount = 10000;
    const positions = new Float32Array(starCount * 3);
    const colors = new Float32Array(starCount * 3);
    const sizes = new Float32Array(starCount);

    for (let i = 0; i < starCount; i++) {
        // –ü–æ–∑–∏—Ü–∏–∏ –∑–≤–µ–∑–¥
        positions[i * 3] = (Math.random() - 0.5) * 2000;
        positions[i * 3 + 1] = (Math.random() - 0.5) * 2000;
        positions[i * 3 + 2] = (Math.random() - 0.5) * 2000;
        
        // –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∑–≤–µ–∑–¥ (–±–µ–ª—ã–µ, —Å–∏–Ω–∏–µ, –∂–µ–ª—Ç—ã–µ)
        const colorChoice = Math.random();
        if (colorChoice < 0.7) {
            // –ë–µ–ª—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 1;
            colors[i * 3 + 1] = 1;
            colors[i * 3 + 2] = 1;
        } else if (colorChoice < 0.85) {
            // –ñ–µ–ª—Ç–æ–≤–∞—Ç—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 1;
            colors[i * 3 + 1] = 0.9;
            colors[i * 3 + 2] = 0.7;
        } else {
            // –°–∏–Ω–µ–≤–∞—Ç—ã–µ –∑–≤–µ–∑–¥—ã
            colors[i * 3] = 0.7;
            colors[i * 3 + 1] = 0.8;
            colors[i * 3 + 2] = 1;
        }
        
        // –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        sizes[i] = Math.random() * 2 + 0.5;
    }

    starGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    starGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
    starGeometry.setAttribute('size', new THREE.BufferAttribute(sizes, 1));

    const starMaterial = new THREE.PointsMaterial({
        size: 2,
        vertexColors: true,
        transparent: true,
        opacity: 0.9,
        sizeAttenuation: true
    });

    const stars = new THREE.Points(starGeometry, starMaterial);
    scene.add(stars);

    return stars;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ó–µ–º–ª–∏ - –£–í–ï–õ–ò–ß–ï–ù–ù–ê–Ø –ú–û–î–ï–õ–¨
function createEarth() {
    const earthRadius = 15; // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 10 –¥–æ 15 (–Ω–∞ 50%)
    const geometry = new THREE.SphereGeometry(earthRadius, 64, 64);
    
    // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –ó–µ–º–ª–∏ –æ—Ç NASA Blue Marble
    const textureLoader = new THREE.TextureLoader();
    const earthTexture = textureLoader.load(
        'textures/earth.jpg',
        () => {
            console.log('‚úÖ –¢–µ–∫—Å—Ç—É—Ä–∞ –ó–µ–º–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (NASA Blue Marble - Equirectangular)');
            console.log('üìê INVERTED MAPPING: lng –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞! –ö–∞—Ä—Ç–∞ –∑–µ—Ä–∫–∞–ª—å–Ω–∞ –∫ —Ç–µ–∫—Å—Ç—É—Ä–µ');
            console.log('üìê Formula: X=R*cos(lat)*cos(-lng), Y=R*sin(lat), Z=R*cos(lat)*sin(-lng)');
            console.log('üîÑ Inverse: lat=asin(y/R), lng=-atan2(z,x)');
        },
        undefined,
        (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç—É—Ä—ã –ó–µ–º–ª–∏:', error);
            // Fallback - –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
            earth.material = new THREE.MeshPhongMaterial({
                color: 0x2233ff,
                specular: new THREE.Color(0x333333),
                shininess: 15
            });
        }
    );
    
    // –ë–ï–ó –°–ú–ï–©–ï–ù–ò–Ø - —Ç–µ–∫—Å—Ç—É—Ä–∞ NASA Blue Marble —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞
    // Equirectangular UV mapping —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
    earthTexture.wrapS = THREE.RepeatWrapping;
    earthTexture.wrapT = THREE.ClampToEdgeWrapping;
    // earthTexture.offset.x = 0; // –ù–ï–¢ –°–ú–ï–©–ï–ù–ò–Ø!
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–ø–µ—Ä—å –¢–û–ß–ù–û —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ç–µ–∫—Å—Ç—É—Ä–æ–π

    // MeshLambertMaterial —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ambient —Å–≤–µ—Ç–æ–º (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ)
    const material = new THREE.MeshLambertMaterial({
        map: earthTexture
    });

    earth = new THREE.Mesh(geometry, material);
    // earth.receiveShadow = true; // –ù–µ –Ω—É–∂–Ω–æ - –Ω–µ—Ç directional —Å–≤–µ—Ç–∞

    // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: 0¬∞ (–±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞)
    earth.rotation.y = 0;
    
    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ –ó–µ–º–ª–∏ - –ú–ï–î–õ–ï–ù–ù–û–ï (1 –æ–±–æ—Ä–æ—Ç = 2 –º–∏–Ω—É—Ç—ã)
    // 2 –º–∏–Ω—É—Ç—ã = 120 —Å–µ–∫—É–Ω–¥ = 7200 –∫–∞–¥—Ä–æ–≤ –ø—Ä–∏ 60fps
    window.earthRotationSpeed = (2 * Math.PI) / (120 * 60); // —Ä–∞–¥–∏–∞–Ω/–∫–∞–¥—Ä –ø—Ä–∏ 60fps = 2 –º–∏–Ω –Ω–∞ –æ–±–æ—Ä–æ—Ç
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö
    window.earthRadius = earthRadius;

    console.log('üåç Earth created: radius =', earthRadius, 'units (150% larger)');
    console.log('üîÑ Rotation enabled: 1 revolution = 2 minutes (SLOW realistic rotation)');

    scene.add(earth);

    // –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ - —Ç–∞–∫–∂–µ —É–≤–µ–ª–∏—á–µ–Ω–∞ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    const atmosphereGeometry = new THREE.SphereGeometry(earthRadius + 0.5, 64, 64);
    const atmosphereMaterial = new THREE.MeshPhongMaterial({
        color: 0x4488ff,
        transparent: true,
        opacity: 0.15,
        side: THREE.BackSide
    });
    const atmosphere = new THREE.Mesh(atmosphereGeometry, atmosphereMaterial);
    earth.add(atmosphere);
}

// –°–û–õ–ù–¶–ï –£–î–ê–õ–ï–ù–û - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ambient –æ—Å–≤–µ—â–µ–Ω–∏–µ
// –°–æ–ª–Ω—Ü–µ –∏ –µ–≥–æ —Ç–æ—á–µ—á–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏
