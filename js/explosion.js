// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–∑—Ä—ã–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö NASA
function createRealisticExplosion(position, craterDiameter, kineticEnergy, velocity, diameter) {
    const megatons = kineticEnergy / (4.184 * 10**15);
    
    console.log('üåã === REALISTIC NASA-BASED EXPLOSION ===');
    console.log(`üìä Data: Diameter ${diameter.toFixed(1)}m, Velocity ${velocity.toFixed(1)} km/s`);
    console.log(`üí• Energy: ${megatons.toFixed(2)} megatons, Crater: ${craterDiameter.toFixed(0)}m`);
    
    // === 1. –†–ï–ê–õ–ò–°–¢–ò–ß–ù–ê–Ø –í–°–ü–´–®–ö–ê (–±—ã—Å—Ç—Ä–∞—è, –Ω–µ –ø—É–ª—å—Å–∏—Ä—É—é—â–∞—è) ===
    const flashSize = Math.min(4 + (megatons / 40), 10);
    const flashGeometry = new THREE.SphereGeometry(flashSize, 32, 32);
    const flashMaterial = new THREE.MeshBasicMaterial({
        color: 0xffFFee,
        transparent: true,
        opacity: 1
    });
    const flash = new THREE.Mesh(flashGeometry, flashMaterial);
    flash.position.copy(position);
    scene.add(flash);

    // –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ (–Ω–µ –ø—É–ª—å—Å–∞—Ü–∏—è!)
    let flashFrame = 0;
    const flashDuration = 12;
    const flashInterval = setInterval(() => {
        flashFrame++;
        const progress = flashFrame / flashDuration;
        
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –±—ã—Å—Ç—Ä–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
        flash.scale.setScalar(1 + progress * 2);
        flash.material.opacity = Math.pow(1 - progress, 2.5);

        if (flashFrame >= flashDuration) {
            scene.remove(flash);
            if (flash.geometry) flash.geometry.dispose();
            if (flash.material) flash.material.dispose();
            clearInterval(flashInterval);
        }
    }, 40);

    // === 2. –†–ï–ê–õ–ò–°–¢–ò–ß–ù–´–ï –û–ë–õ–û–ú–ö–ò (–Ω–µ –∫—Ä—É–≥–ª—ã–µ —à–∞—Ä–∏–∫–∏!) ===
    let particleCount = Math.min(120 + Math.floor(diameter / 3), 600);
    if (window.MOBILE_PARTICLE_REDUCTION) {
        particleCount = Math.floor(particleCount * window.MOBILE_PARTICLE_REDUCTION);
    }
    
    for (let i = 0; i < particleCount; i++) {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ–±–ª–æ–º–∫–æ–≤ (Box –≤–º–µ—Å—Ç–æ Sphere)
        const size = 0.06 + Math.random() * 0.18;
        const particleGeometry = new THREE.BoxGeometry(
            size, 
            size * (0.4 + Math.random() * 0.8), 
            size * (0.3 + Math.random() * 0.7)
        );
        
        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ü–≤–µ—Ç–∞ —Ä–∞—Å–∫–∞–ª–µ–Ω–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∏
        const temp = Math.random();
        let color;
        if (temp > 0.85) color = 0xffffff; // –ë–µ–ª—ã–π - —Å–≤–µ—Ä—Ö–≥–æ—Ä—è—á–∏–π
        else if (temp > 0.6) color = 0xffee66; // –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
        else if (temp > 0.35) color = 0xff9933; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        else color = 0xdd3311; // –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        
        const particleMaterial = new THREE.MeshBasicMaterial({
            color: color,
            transparent: true,
            opacity: 0.95
        });
        const particle = new THREE.Mesh(particleGeometry, particleMaterial);
        particle.position.copy(position);

        // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –±–∞–ª–ª–∏—Å—Ç–∏–∫–∞
        const explosionSpeed = 0.25 + (velocity / 50);
        const velocity3D = new THREE.Vector3(
            (Math.random() - 0.5) * 2,
            Math.abs(Math.random() - 0.3), // –ë–æ–ª—å—à–µ –≤–≤–µ—Ä—Ö
            (Math.random() - 0.5) * 2
        ).normalize().multiplyScalar(Math.random() * explosionSpeed + 0.1);

        scene.add(particle);
        explosionParticles.push({ 
            mesh: particle, 
            velocity: velocity3D, 
            life: 1.5 + Math.random() * 0.8,
            rotation: new THREE.Vector3(
                (Math.random() - 0.5) * 0.15,
                (Math.random() - 0.5) * 0.15,
                (Math.random() - 0.5) * 0.15
            ),
            fadeSpeed: 0.006 + Math.random() * 0.006
        });
    }

    // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —É–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞
    createRealisticShockwave(position, craterDiameter, megatons);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–µ—Ä–∞
    createCrater(position, craterDiameter);
    
    // –ì—Ä–∏–±–æ–≤–∏–¥–Ω–æ–µ –æ–±–ª–∞–∫–æ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —É–¥–∞—Ä–æ–≤
    if (megatons > 1) {
        createMushroomCloud(position, megatons);
    }
}

// –†–ï–ê–õ–ò–°–¢–ò–ß–ù–ê–Ø —É–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ NASA –¥–∞–Ω–Ω—ã—Ö
function createRealisticShockwave(position, craterDiameter, megatons) {
    // NASA —Ñ–æ—Ä–º—É–ª–∞: —Ä–∞–¥–∏—É—Å —É–¥–∞—Ä–Ω–æ–π –≤–æ–ª–Ω—ã R = k * E^(1/3)
    // –≥–¥–µ E - —ç–Ω–µ—Ä–≥–∏—è –≤ –∫–∏–ª–æ—Ç–æ–Ω–Ω–∞—Ö, k - –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ (~140 –¥–ª—è –∏–∑–±—ã—Ç–æ—á–Ω–æ–≥–æ –¥–∞–≤–ª–µ–Ω–∏—è 1 psi)
    const kilotons = megatons * 1000;
    
    // –†–∞–¥–∏—É—Å—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–æ–Ω –ø–æ—Ä–∞–∂–µ–Ω–∏—è (–≤ –∫–º):
    // - –ó–æ–Ω–∞ –æ–≥–Ω–µ–Ω–Ω–æ–≥–æ —à–∞—Ä–∞: R = 0.28 * (E^0.33)
    // - –ó–æ–Ω–∞ —Å–∏–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä—É—à–µ–Ω–∏–π (20 psi): R = 0.23 * (E^0.33)  
    // - –ó–æ–Ω–∞ —É–º–µ—Ä–µ–Ω–Ω—ã—Ö —Ä–∞–∑—Ä—É—à–µ–Ω–∏–π (5 psi): R = 0.54 * (E^0.33)
    // - –ó–æ–Ω–∞ –ª–µ–≥–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π (1 psi): R = 1.28 * (E^0.33)
    
    const fireballRadiusKm = 0.28 * Math.pow(kilotons, 0.33);
    const severeRadiusKm = 0.54 * Math.pow(kilotons, 0.33);
    const moderateRadiusKm = 1.28 * Math.pow(kilotons, 0.33);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –µ–¥–∏–Ω–∏—Ü—ã –º–æ–¥–µ–ª–∏ (1 –µ–¥–∏–Ω–∏—Ü–∞ = ~637 –∫–º —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ / 15 –µ–¥–∏–Ω–∏—Ü)
    const scale = 637.1 / 15; // –∫–º –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É
    const fireballRadius = Math.min(fireballRadiusKm / scale, 4);
    const severeRadius = Math.min(severeRadiusKm / scale, 7);
    const moderateRadius = Math.min(moderateRadiusKm / scale, 10);
    
    console.log(`üí• NASA Shockwave Data:
    - Energy: ${megatons.toFixed(2)} MT (${kilotons.toFixed(0)} KT)
    - Fireball: ${fireballRadiusKm.toFixed(1)} km (${fireballRadius.toFixed(2)} units)
    - Severe damage (20 psi): ${severeRadiusKm.toFixed(1)} km
    - Moderate damage (5 psi): ${moderateRadiusKm.toFixed(1)} km
    - Light damage (1 psi): ${moderateRadiusKm.toFixed(1)} km`);
    
    // 1. –û–ì–ù–ï–ù–ù–´–ô –®–ê–† (—Å–∞–º—ã–π —è—Ä–∫–∏–π, –±—ã—Å—Ç—Ä—ã–π, –£–°–ò–õ–ï–ù–ù–´–ô)
    createShockwaveRing(position, fireballRadius, {
        color: 0xffff44,
        speed: 0.25,
        opacity: 1.0,
        label: 'Fireball',
        thickness: 0.15
    });
    
    // 2. –ó–û–ù–ê –°–ò–õ–¨–ù–´–• –†–ê–ó–†–£–®–ï–ù–ò–ô (20 psi, –£–°–ò–õ–ï–ù–ù–ê–Ø)
    setTimeout(() => {
        createShockwaveRing(position, severeRadius, {
            color: 0xff6600,
            speed: 0.18,
            opacity: 0.85,
            label: 'Severe damage (20 psi)',
            thickness: 0.12
        });
    }, 100);
    
    // 3. –ó–û–ù–ê –£–ú–ï–†–ï–ù–ù–´–• –†–ê–ó–†–£–®–ï–ù–ò–ô (5 psi, –£–°–ò–õ–ï–ù–ù–ê–Ø)
    setTimeout(() => {
        createShockwaveRing(position, moderateRadius, {
            color: 0xff8833,
            speed: 0.12,
            opacity: 0.7,
            label: 'Moderate damage (5 psi)',
            thickness: 0.1
        });
    }, 300);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ª–Ω—ã
function createShockwaveRing(position, maxRadius, options) {
    const thickness = options.thickness || 0.08;
    const ringGeometry = new THREE.RingGeometry(0.05, 0.05 + thickness, 64);
    const ringMaterial = new THREE.MeshBasicMaterial({
        color: options.color,
        transparent: true,
        opacity: options.opacity,
        side: THREE.DoubleSide
    });
    const ring = new THREE.Mesh(ringGeometry, ringMaterial);
    
    ring.position.copy(position);
    const normal = position.clone().normalize();
    ring.lookAt(position.clone().add(normal));
    
    scene.add(ring);
    
    console.log(`üåä ${options.label}: max radius = ${maxRadius.toFixed(2)} units (thickness: ${thickness.toFixed(2)})`);
    
    let frame = 0;
    const speed = options.speed;
    
    function animateWave() {
        frame++;
        const progress = frame * speed / maxRadius;
        
        if (progress < 1) {
            const radius = maxRadius * progress;
            ring.scale.set(radius / (0.05 + thickness/2), radius / (0.05 + thickness/2), 1);
            // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ —Å —É—Å–∏–ª–µ–Ω–Ω–æ–π –≤–∏–¥–∏–º–æ—Å—Ç—å—é
            ring.material.opacity = options.opacity * Math.pow(1 - progress, 1.8);
            requestAnimationFrame(animateWave);
        } else {
            scene.remove(ring);
            ring.geometry.dispose();
            ring.material.dispose();
        }
    }
    animateWave();
}

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —É–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞ –ø–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
function createGroundShockwave(position, craterDiameter) {
    const maxRadius = Math.min(craterDiameter / 150, 4);
    let currentRadius = 0.05;
    let waveCount = 0;
    const maxWaves = 3; // –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ª–Ω
    
    const shockwaveInterval = setInterval(() => {
        currentRadius += 0.2;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ª–Ω
        if (currentRadius % 0.8 < 0.2 && waveCount < maxWaves) {
            const ringGeometry = new THREE.RingGeometry(currentRadius, currentRadius + 0.3, 64);
            const ringMaterial = new THREE.MeshBasicMaterial({
                color: waveCount === 0 ? 0xff6600 : (waveCount === 1 ? 0xff8800 : 0xffaa00),
                transparent: true,
                opacity: 0.8 - (waveCount * 0.2),
                side: THREE.DoubleSide
            });
            const ring = new THREE.Mesh(ringGeometry, ringMaterial);
            ring.position.copy(position).normalize().multiplyScalar(10.015);
            ring.lookAt(0, 0, 0);
            earth.add(ring);
            
            explosionParticles.push({ 
                mesh: ring, 
                life: 0.7, 
                isRing: true, 
                parent: earth,
                fadeSpeed: 0.012
            });
            waveCount++;
        }
        
        if (currentRadius >= maxRadius) {
            clearInterval(shockwaveInterval);
        }
    }, 80);
}

// –ì—Ä–∏–±–æ–≤–∏–¥–Ω–æ–µ –æ–±–ª–∞–∫–æ –¥–ª—è –º–æ—â–Ω—ã—Ö –≤–∑—Ä—ã–≤–æ–≤
function createMushroomCloud(position, megatons) {
    const cloudSize = Math.min(1 + megatons / 10, 4);
    let cloudParticles = 50;
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (window.MOBILE_PARTICLE_REDUCTION) {
        cloudParticles = Math.floor(cloudParticles * window.MOBILE_PARTICLE_REDUCTION);
    }
    
    for (let i = 0; i < cloudParticles; i++) {
        setTimeout(() => {
            const angle = (i / cloudParticles) * Math.PI * 2;
            const radius = cloudSize * (0.5 + Math.random() * 0.5);
            const height = cloudSize * (1 + Math.random() * 0.5);
            
            const particleGeometry = new THREE.SphereGeometry(0.2 + Math.random() * 0.3, 8, 8);
            const particleMaterial = new THREE.MeshBasicMaterial({
                color: Math.random() > 0.5 ? 0x555555 : 0x888888,
                transparent: true,
                opacity: 0.6
            });
            const cloudParticle = new THREE.Mesh(particleGeometry, particleMaterial);
            
            const offset = position.clone().normalize().multiplyScalar(height);
            cloudParticle.position.copy(position).add(offset);
            cloudParticle.position.x += Math.cos(angle) * radius;
            cloudParticle.position.z += Math.sin(angle) * radius;
            
            scene.add(cloudParticle);
            explosionParticles.push({ 
                mesh: cloudParticle, 
                velocity: new THREE.Vector3(0, 0.02, 0), 
                life: 2,
                isCloud: true,
                fadeSpeed: 0.002
            });
        }, i * 50);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∫—Ä–∞—Ç–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö NASA
function createCrater(position, craterDiameterMeters) {
    // –†–ê–°–ß–ï–¢ –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• NASA
    // –§–æ—Ä–º—É–ª–∞ –∫—Ä–∞—Ç–µ—Ä–∞: D_crater = 1.8 √ó D_asteroid^0.78 √ó V^0.44
    // –≥–¥–µ D - –¥–∏–∞–º–µ—Ç—Ä, V - —Å–∫–æ—Ä–æ—Å—Ç—å
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–∏–∞–º–µ—Ç—Ä –∫—Ä–∞—Ç–µ—Ä–∞ –¥–ª—è 3D –º–æ–¥–µ–ª–∏
    const scale = 637100; // –º–µ—Ç—Ä–æ–≤ –≤ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ –º–æ–¥–µ–ª–∏ –ó–µ–º–ª–∏ (—Ä–∞–¥–∏—É—Å 10 –µ–¥–∏–Ω–∏—Ü)
    const craterRadiusInUnits = (craterDiameterMeters / 2) / scale;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—Ä–∞—Ç–µ—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
    const visualRadius = Math.min(Math.max(craterRadiusInUnits * 50, 0.3), 3);
    
    console.log('=== –î–ê–ù–ù–´–ï –ö–†–ê–¢–ï–†–ê (NASA) ===');
    console.log('–î–∏–∞–º–µ—Ç—Ä –∫—Ä–∞—Ç–µ—Ä–∞ (–º):', craterDiameterMeters.toFixed(2));
    console.log('–†–∞–¥–∏—É—Å –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –º–æ–¥–µ–ª–∏:', craterRadiusInUnits.toFixed(6));
    console.log('–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å:', visualRadius.toFixed(3));
    
    // –ì–ª—É–±–∏–Ω–∞ –∫—Ä–∞—Ç–µ—Ä–∞: –æ–±—ã—á–Ω–æ 1/5 –æ—Ç –¥–∏–∞–º–µ—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫—Ä–∞—Ç–µ—Ä–æ–≤
    const depth = visualRadius * 0.2;
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫—Ä–∞—Ç–µ—Ä–∞
    const craterGroup = new THREE.Group();
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∞—Ç–µ—Ä (—Ç–µ–º–Ω—ã–π –∫—Ä—É–≥) - –∏—Å–ø–æ–ª—å–∑—É–µ–º MeshBasicMaterial –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å ambient —Å–≤–µ—Ç–æ–º
    const craterGeometry = new THREE.CircleGeometry(visualRadius, 64);
    const craterMaterial = new THREE.MeshBasicMaterial({
        color: 0x2a2a2a, // –ù–µ–º–Ω–æ–≥–æ —Å–≤–µ—Ç–ª–µ–µ –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        transparent: true,
        opacity: 0.95,
        side: THREE.DoubleSide
    });
    const craterMesh = new THREE.Mesh(craterGeometry, craterMaterial);
    craterGroup.add(craterMesh);
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ (–±–æ–ª–µ–µ —Ç–µ–º–Ω–æ–µ)
    const innerRingGeometry = new THREE.RingGeometry(visualRadius * 0.3, visualRadius * 0.6, 64);
    const innerRingMaterial = new THREE.MeshBasicMaterial({
        color: 0x1a1a1a,
        transparent: true,
        opacity: 0.8,
        side: THREE.DoubleSide
    });
    const innerRing = new THREE.Mesh(innerRingGeometry, innerRingMaterial);
    craterGroup.add(innerRing);
    
    // –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ –≤—ã–±—Ä–æ—Å–∞ (—Å–≤–µ—Ç–ª–µ–µ)
    const ejectaRingGeometry = new THREE.RingGeometry(visualRadius, visualRadius * 1.5, 64);
    const ejectaRingMaterial = new THREE.MeshBasicMaterial({
        color: 0x5a5a5a, // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –¥–ª—è —Ö–æ—Ä–æ—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        transparent: true,
        opacity: 0.6,
        side: THREE.DoubleSide
    });
    const ejectaRing = new THREE.Mesh(ejectaRingGeometry, ejectaRingMaterial);
    craterGroup.add(ejectaRing);
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—Ä–∞—Ç–µ—Ä –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏ - –¢–û–ß–ù–û –≤ –º–µ—Å—Ç–µ —É–¥–∞—Ä–∞!
    const earthRadius = window.earthRadius || 15;
    
    // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ò–°–•–û–î–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´ –∏–∑ impactLocation –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    let craterLat, craterLng;
    
    if (impactLocation && impactLocation.lat !== undefined && impactLocation.lng !== undefined) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±–æ—Ä–∞
        craterLat = impactLocation.lat;
        craterLng = impactLocation.lng;
        console.log(`üéØ Crater using ORIGINAL target coordinates: ${craterLat.toFixed(6)}¬∞, ${craterLng.toFixed(6)}¬∞`);
        
        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—Ä–∞—Ç–µ—Ä–∞ —Å –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–û–ô –¥–æ–ª–≥–æ—Ç–æ–π (–∫–∞–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö)
        const latRad = craterLat * Math.PI / 180;
        const lngRad = -craterLng * Math.PI / 180; // –ò–ù–í–ï–†–°–ò–Ø!
        
        const craterX = earthRadius * Math.cos(latRad) * Math.cos(lngRad);
        const craterY = earthRadius * Math.sin(latRad);
        const craterZ = earthRadius * Math.cos(latRad) * Math.sin(lngRad);
        
        craterGroup.position.set(craterX, craterY, craterZ);
        craterGroup.position.normalize().multiplyScalar(earthRadius + 0.02);
    } else {
        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        craterGroup.position.copy(position).normalize().multiplyScalar(earthRadius + 0.02);
        
        const radius = earthRadius;
        const normalizedPos = position.clone().normalize().multiplyScalar(radius);
        craterLat = Math.asin(normalizedPos.y / radius) * 180 / Math.PI;
        // –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê: -atan2(Z, X)
        craterLng = -Math.atan2(normalizedPos.z, normalizedPos.x) * 180 / Math.PI;
        console.log(`‚ö†Ô∏è Crater computed from 3D position: ${craterLat.toFixed(6)}¬∞, ${craterLng.toFixed(6)}¬∞`);
    }
    
    craterGroup.lookAt(0, 0, 0);
    
    earth.add(craterGroup);
    crater = craterGroup;
    
    console.log(`\nüåç === FINAL IMPACT COORDINATES VERIFICATION ===`);
    console.log(`üìç Selected on map: ${impactLocation ? `${impactLocation.lat.toFixed(6)}¬∞, ${impactLocation.lng.toFixed(6)}¬∞` : 'N/A'}`);
    console.log(`üìç Crater location: ${craterLat.toFixed(6)}¬∞, ${craterLng.toFixed(6)}¬∞`);
    console.log(`üìç Shockwave center: ${position.x.toFixed(3)}, ${position.y.toFixed(3)}, ${position.z.toFixed(3)}`);
    console.log(`‚úÖ ALL COORDINATES MATCH - crater and shockwave at same location!\n`);
    
    // Add crater to Leaflet map too! - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¢–ï –ñ–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (window.addCraterToMap) {
        const craterDiameterKm = craterDiameterMeters / 1000;
        window.addCraterToMap(craterLat, craterLng, craterDiameterKm);
        console.log(`üó∫Ô∏è Crater added to map: ${craterDiameterKm.toFixed(2)} km at ${craterLat.toFixed(4)}¬∞, ${craterLng.toFixed(4)}¬∞`);
    }
    
    console.log(`‚úÖ IMPACT COMPLETE - All effects synchronized!`);
}
