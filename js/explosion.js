// –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≤–∑—Ä—ã–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö NASA
function createRealisticExplosion(position, craterDiameter, kineticEnergy, velocity, diameter) {
    const megatons = kineticEnergy / (4.184 * 10**15);
    
    console.log('üåã === NASA-BASED IMPACT SIMULATION ===');
    console.log(`üìä Real NASA Data: Diameter ${diameter.toFixed(1)}m, Velocity ${velocity.toFixed(1)} km/s`);
    console.log(`üí• Calculated Energy: ${megatons.toFixed(2)} megatons TNT`);
    console.log(`üï≥Ô∏è Crater Formula (NASA): D = 1.8 √ó d^0.78 √ó v^0.44 = ${craterDiameter.toFixed(0)}m`);
    
    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ì–õ–ê–í–ù–ê–Ø –í–°–ü–´–®–ö–ê
    const flashSize = Math.min(3 + (megatons / 50), 12);
    const flashGeometry = new THREE.SphereGeometry(flashSize, 32, 32);
    const flashMaterial = new THREE.MeshBasicMaterial({
        color: 0xffffff,
        transparent: true,
        opacity: 1
    });
    const flash = new THREE.Mesh(flashGeometry, flashMaterial);
    flash.position.copy(position);
    scene.add(flash);

    // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∞–Ω–∏–º–∞—Ü–∏—è –≤—Å–ø—ã—à–∫–∏ —Å –ø—É–ª—å—Å–∞—Ü–∏–µ–π
    let flashScale = 1;
    let pulseDirection = 1;
    const flashInterval = setInterval(() => {
        flashScale += 0.4 * pulseDirection;
        
        // –ü—É–ª—å—Å–∞—Ü–∏—è –ø–µ—Ä–≤—ã–µ 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if (flashScale > 1.5 && pulseDirection === 1) {
            pulseDirection = -1;
        } else if (flashScale < 1.2 && pulseDirection === -1) {
            pulseDirection = 1;
        }
        
        flash.scale.set(flashScale, flashScale, flashScale);
        flash.material.opacity -= 0.025;

        if (flash.material.opacity <= 0) {
            scene.remove(flash);
            if (flash.geometry) flash.geometry.dispose();
            if (flash.material) flash.material.dispose();
            clearInterval(flashInterval);
        }
    }, 50);

    // –£–õ–£–ß–®–ï–ù–ù–´–ô –æ–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º —Ü–≤–µ—Ç–æ–≤
    let particleCount = Math.min(150 + Math.floor(diameter / 5), 800);
    if (window.MOBILE_PARTICLE_REDUCTION) {
        particleCount = Math.floor(particleCount * window.MOBILE_PARTICLE_REDUCTION);
    }
    
    for (let i = 0; i < particleCount; i++) {
        const particleSize = 0.08 + Math.random() * 0.25;
        const particleGeometry = new THREE.SphereGeometry(particleSize, 8, 8);
        
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤–∑—Ä—ã–≤–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º –æ—Ç —Ü–µ–Ω—Ç—Ä–∞
        const distance = Math.random();
        let color;
        if (distance < 0.2) {
            color = 0xffffff; // –ë–µ–ª—ã–π —Ü–µ–Ω—Ç—Ä (—Å–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
        } else if (distance < 0.4) {
            color = 0xffffaa; // –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π
        } else if (distance < 0.6) {
            color = 0xffff00; // –ñ–µ–ª—Ç—ã–π
        } else if (distance < 0.8) {
            color = 0xff8800; // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        } else {
            color = Math.random() > 0.5 ? 0xff4400 : 0xff0000; // –ö—Ä–∞—Å–Ω—ã–π/–¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π
        }
        
        const particleMaterial = new THREE.MeshBasicMaterial({
            color: color,
            transparent: true,
            opacity: 1
        });
        const particle = new THREE.Mesh(particleGeometry, particleMaterial);
        particle.position.copy(position);

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–∑–ª–µ—Ç–∞ - –≤–∑—Ä—ã–≤–Ω–∞—è –≤–æ–ª–Ω–∞
        const explosionSpeed = 0.3 + (velocity / 40);
        const velocity3D = new THREE.Vector3(
            (Math.random() - 0.5) * 2,
            (Math.random() - 0.5) * 2,
            (Math.random() - 0.5) * 2
        ).normalize().multiplyScalar(Math.random() * explosionSpeed + 0.15);

        scene.add(particle);
        explosionParticles.push({ 
            mesh: particle, 
            velocity: velocity3D, 
            life: 1.2,
            fadeSpeed: 0.004 + Math.random() * 0.008
        });
    }

    // –£–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
    createGroundShockwave(position, craterDiameter);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Ç–µ—Ä–∞
    createCrater(position, craterDiameter);
    
    // –ì—Ä–∏–±–æ–≤–∏–¥–Ω–æ–µ –æ–±–ª–∞–∫–æ –¥–ª—è –∫—Ä—É–ø–Ω—ã—Ö —É–¥–∞—Ä–æ–≤
    if (megatons > 1) {
        createMushroomCloud(position, megatons);
    }
}

// –£–õ–£–ß–®–ï–ù–ù–ê–Ø —É–¥–∞—Ä–Ω–∞—è –≤–æ–ª–Ω–∞ –ø–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏
function createGroundShockwave(position, craterDiameter) {
    const maxRadius = Math.min(craterDiameter / 150, 4);
    let currentRadius = 0.05;
    let waveCount = 0;
    const maxWaves = 3; // –ù–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ª–Ω
    
    const shockwaveInterval = setInterval(() => {
        currentRadius += 0.2;
        
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –≤–æ–ª–Ω
        if (currentRadius % 0.8 < 0.2 && waveCount < maxWaves) {
            const ringGeometry = new THREE.RingGeometry(currentRadius, currentRadius + 0.3, 64);
            const ringMaterial = new THREE.MeshBasicMaterial({
                color: waveCount === 0 ? 0xff6600 : (waveCount === 1 ? 0xff8800 : 0xffaa00),
                transparent: true,
                opacity: 0.8 - (waveCount * 0.2),
                side: THREE.DoubleSide
            });
            const ring = new THREE.Mesh(ringGeometry, ringMaterial);
            ring.position.copy(position).normalize().multiplyScalar(10.015);
            ring.lookAt(0, 0, 0);
            earth.add(ring);
            
            explosionParticles.push({ 
                mesh: ring, 
                life: 0.7, 
                isRing: true, 
                parent: earth,
                fadeSpeed: 0.012
            });
            waveCount++;
        }
        
        if (currentRadius >= maxRadius) {
            clearInterval(shockwaveInterval);
        }
    }, 80);
}

// –ì—Ä–∏–±–æ–≤–∏–¥–Ω–æ–µ –æ–±–ª–∞–∫–æ –¥–ª—è –º–æ—â–Ω—ã—Ö –≤–∑—Ä—ã–≤–æ–≤
function createMushroomCloud(position, megatons) {
    const cloudSize = Math.min(1 + megatons / 10, 4);
    let cloudParticles = 50;
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
    if (window.MOBILE_PARTICLE_REDUCTION) {
        cloudParticles = Math.floor(cloudParticles * window.MOBILE_PARTICLE_REDUCTION);
    }
    
    for (let i = 0; i < cloudParticles; i++) {
        setTimeout(() => {
            const angle = (i / cloudParticles) * Math.PI * 2;
            const radius = cloudSize * (0.5 + Math.random() * 0.5);
            const height = cloudSize * (1 + Math.random() * 0.5);
            
            const particleGeometry = new THREE.SphereGeometry(0.2 + Math.random() * 0.3, 8, 8);
            const particleMaterial = new THREE.MeshBasicMaterial({
                color: Math.random() > 0.5 ? 0x555555 : 0x888888,
                transparent: true,
                opacity: 0.6
            });
            const cloudParticle = new THREE.Mesh(particleGeometry, particleMaterial);
            
            const offset = position.clone().normalize().multiplyScalar(height);
            cloudParticle.position.copy(position).add(offset);
            cloudParticle.position.x += Math.cos(angle) * radius;
            cloudParticle.position.z += Math.sin(angle) * radius;
            
            scene.add(cloudParticle);
            explosionParticles.push({ 
                mesh: cloudParticle, 
                velocity: new THREE.Vector3(0, 0.02, 0), 
                life: 2,
                isCloud: true,
                fadeSpeed: 0.002
            });
        }, i * 50);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –∫—Ä–∞—Ç–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö NASA
function createCrater(position, craterDiameterMeters) {
    // –†–ê–°–ß–ï–¢ –ù–ê –û–°–ù–û–í–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• NASA
    // –§–æ—Ä–º—É–ª–∞ –∫—Ä–∞—Ç–µ—Ä–∞: D_crater = 1.8 √ó D_asteroid^0.78 √ó V^0.44
    // –≥–¥–µ D - –¥–∏–∞–º–µ—Ç—Ä, V - —Å–∫–æ—Ä–æ—Å—Ç—å
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–∏–∞–º–µ—Ç—Ä –∫—Ä–∞—Ç–µ—Ä–∞ –¥–ª—è 3D –º–æ–¥–µ–ª–∏
    const scale = 637100; // –º–µ—Ç—Ä–æ–≤ –≤ –æ–¥–Ω–æ–π –µ–¥–∏–Ω–∏—Ü–µ –º–æ–¥–µ–ª–∏ –ó–µ–º–ª–∏ (—Ä–∞–¥–∏—É—Å 10 –µ–¥–∏–Ω–∏—Ü)
    const craterRadiusInUnits = (craterDiameterMeters / 2) / scale;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—Ä–∞—Ç–µ—Ä–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏)
    const visualRadius = Math.min(Math.max(craterRadiusInUnits * 50, 0.3), 3);
    
    console.log('=== –î–ê–ù–ù–´–ï –ö–†–ê–¢–ï–†–ê (NASA) ===');
    console.log('–î–∏–∞–º–µ—Ç—Ä –∫—Ä–∞—Ç–µ—Ä–∞ (–º):', craterDiameterMeters.toFixed(2));
    console.log('–†–∞–¥–∏—É—Å –≤ –µ–¥–∏–Ω–∏—Ü–∞—Ö –º–æ–¥–µ–ª–∏:', craterRadiusInUnits.toFixed(6));
    console.log('–í–∏–∑—É–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å:', visualRadius.toFixed(3));
    
    // –ì–ª—É–±–∏–Ω–∞ –∫—Ä–∞—Ç–µ—Ä–∞: –æ–±—ã—á–Ω–æ 1/5 –æ—Ç –¥–∏–∞–º–µ—Ç—Ä–∞ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∫—Ä–∞—Ç–µ—Ä–æ–≤
    const depth = visualRadius * 0.2;
    
    // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è –∫—Ä–∞—Ç–µ—Ä–∞
    const craterGroup = new THREE.Group();
    
    // –û—Å–Ω–æ–≤–Ω–æ–π –∫—Ä–∞—Ç–µ—Ä (—Ç–µ–º–Ω—ã–π –∫—Ä—É–≥)
    const craterGeometry = new THREE.CircleGeometry(visualRadius, 64);
    const craterMaterial = new THREE.MeshPhongMaterial({
        color: 0x1a1a1a,
        transparent: true,
        opacity: 0.9,
        side: THREE.DoubleSide
    });
    const craterMesh = new THREE.Mesh(craterGeometry, craterMaterial);
    craterGroup.add(craterMesh);
    
    // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∫–æ–ª—å—Ü–æ (–±–æ–ª–µ–µ —Ç–µ–º–Ω–æ–µ)
    const innerRingGeometry = new THREE.RingGeometry(visualRadius * 0.3, visualRadius * 0.6, 64);
    const innerRingMaterial = new THREE.MeshPhongMaterial({
        color: 0x0d0d0d,
        transparent: true,
        opacity: 0.7,
        side: THREE.DoubleSide
    });
    const innerRing = new THREE.Mesh(innerRingGeometry, innerRingMaterial);
    craterGroup.add(innerRing);
    
    // –í–Ω–µ—à–Ω–µ–µ –∫–æ–ª—å—Ü–æ –≤—ã–±—Ä–æ—Å–∞ (—Å–≤–µ—Ç–ª–µ–µ)
    const ejectaRingGeometry = new THREE.RingGeometry(visualRadius, visualRadius * 1.5, 64);
    const ejectaRingMaterial = new THREE.MeshPhongMaterial({
        color: 0x3a3a3a,
        transparent: true,
        opacity: 0.5,
        side: THREE.DoubleSide
    });
    const ejectaRing = new THREE.Mesh(ejectaRingGeometry, ejectaRingMaterial);
    craterGroup.add(ejectaRing);
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –∫—Ä–∞—Ç–µ—Ä –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ó–µ–º–ª–∏ - –¢–û–ß–ù–û –≤ –º–µ—Å—Ç–µ —É–¥–∞—Ä–∞!
    craterGroup.position.copy(position).normalize().multiplyScalar(10.02);
    craterGroup.lookAt(0, 0, 0);
    
    earth.add(craterGroup);
    crater = craterGroup;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—Ä–∞—Ç–µ—Ä–∞ –∏–∑ 3D –ø–æ–∑–∏—Ü–∏–∏ –≤–∑—Ä—ã–≤–∞
    // –í–ê–ñ–ù–û: –ø–æ–∑–∏—Ü–∏—è –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–π impactLocation –∏–∑-–∑–∞ –≤—Ä–∞—â–µ–Ω–∏—è –ó–µ–º–ª–∏!
    const radius = 10;
    const normalizedPos = position.clone().normalize().multiplyScalar(radius);
    const craterLat = Math.asin(normalizedPos.y / radius) * 180 / Math.PI;
    const craterLng = Math.atan2(normalizedPos.x, -normalizedPos.z) * 180 / Math.PI;
    
    console.log(`üéØ Crater created at ACTUAL impact position:`);
    console.log(`   3D position: X=${position.x.toFixed(3)}, Y=${position.y.toFixed(3)}, Z=${position.z.toFixed(3)}`);
    console.log(`   Coordinates: ${craterLat.toFixed(6)}¬∞, ${craterLng.toFixed(6)}¬∞`);
    
    // Add crater to Leaflet map too! - –∏—Å–ø–æ–ª—å–∑—É–µ–º –í–´–ß–ò–°–õ–ï–ù–ù–´–ï –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (window.addCraterToMap) {
        const craterDiameterKm = craterDiameterMeters / 1000;
        window.addCraterToMap(craterLat, craterLng, craterDiameterKm);
        console.log(`üó∫Ô∏è Crater added to map: ${craterDiameterKm.toFixed(2)} km at ${craterLat.toFixed(4)}¬∞, ${craterLng.toFixed(4)}¬∞`);
    }
    
    console.log(`‚úÖ Crater created on globe and maps: diameter ${craterDiameterMeters.toFixed(0)}m, visual radius ${visualRadius.toFixed(2)} units`);
}
