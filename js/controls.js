// Set coordinates manually
function setCoordinatesFromInput() {
    const latInput = parseFloat(document.getElementById('lat-input').value);
    const lngInput = parseFloat(document.getElementById('lng-input').value);
    
    if (isNaN(latInput) || isNaN(lngInput)) {
        alert('Please enter valid coordinates!');
        return;
    }
    
    if (latInput < -90 || latInput > 90) {
        alert('Latitude must be between -90 and 90');
        return;
    }
    
    if (lngInput < -180 || lngInput > 180) {
        alert('Longitude must be between -180 and 180');
        return;
    }
    
    setImpactLocation(latInput, lngInput);
}

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Å—Ç–∞ –ø–∞–¥–µ–Ω–∏—è - –°–ò–ù–•–†–û–ù–ò–ó–ò–†–û–í–ê–ù–û –° –ö–ê–†–¢–û–ô –ò –¢–ï–ö–°–¢–£–†–û–ô
function setImpactLocation(lat, lng, point = null) {
    impactLocation = { lat, lng };
    document.getElementById('lat').textContent = lat.toFixed(2) + '¬∞';
    document.getElementById('lng').textContent = lng.toFixed(2) + '¬∞';
    document.getElementById('lat-input').value = lat.toFixed(2);
    document.getElementById('lng-input').value = lng.toFixed(2);

    const radius = window.earthRadius || 15;
    const latRad = lat * Math.PI / 180;
    const lngRad = -lng * Math.PI / 180;  // –ò–ù–í–ï–†–¢–ò–†–£–ï–ú –¥–æ–ª–≥–æ—Ç—É! –ö–∞—Ä—Ç–∞ –∑–µ—Ä–∫–∞–ª—å–Ω–∞ –∫ —Ç–µ–∫—Å—Ç—É—Ä–µ

    // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –§–û–†–ú–£–õ–ê –¥–ª—è Equirectangular —Ç–µ–∫—Å—Ç—É—Ä—ã (—Å—Ç–∞–Ω–¥–∞—Ä—Ç NASA Blue Marble)
    // lng=0¬∞ (Greenwich) —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ +X
    // lng=90¬∞E (–∫–∞—Ä—Ç–∞) ‚Üí -90¬∞ (3D) —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ -Z
    // lng=-90¬∞W (–∫–∞—Ä—Ç–∞) ‚Üí +90¬∞ (3D) —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ +Z
    const localPoint = new THREE.Vector3(
        radius * Math.cos(latRad) * Math.cos(lngRad),   // X = R*cos(lat)*cos(-lng)
        radius * Math.sin(latRad),                        // Y = R*sin(lat)
        radius * Math.cos(latRad) * Math.sin(lngRad)    // Z = R*cos(lat)*sin(-lng)
    );
    impactLocation.point = localPoint;

    // –û–±—Ä–∞—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const verifyLat = Math.asin(localPoint.y / radius) * 180 / Math.PI;
    const verifyLng = -Math.atan2(localPoint.z, localPoint.x) * 180 / Math.PI;  // –û–±—Ä–∞—Ç–Ω–∞—è –∏–Ω–≤–µ—Ä—Å–∏—è
    const dLat = Math.abs(lat - verifyLat);
    const dLng = Math.abs(lng - verifyLng);
    console.log(`üîç VERIFY: ${verifyLat.toFixed(5)}¬∞, ${verifyLng.toFixed(5)}¬∞  ŒîLat=${dLat.toFixed(5)} ŒîLng=${dLng.toFixed(5)}`);

    console.log(`üåç Impact set: ${lat.toFixed(4)}¬∞, ${lng.toFixed(4)}¬∞`);
    console.log(`üìç 3D point: X=${localPoint.x.toFixed(3)}, Y=${localPoint.y.toFixed(3)}, Z=${localPoint.z.toFixed(3)}`);

    updateMapMarker(lat, lng);
    checkReadyToStart();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ HTML
window.setImpactLocation = setImpactLocation;

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –º–µ—Å—Ç
function testCoordinates() {
    console.log('=== –¢–ï–°–¢ –ö–û–û–†–î–ò–ù–ê–¢ ===');
    const testPoints = [
        { name: '–ù—É–ª–µ–≤–∞—è —Ç–æ—á–∫–∞ (0¬∞, 0¬∞)', lat: 0, lng: 0 },
        { name: '–õ–æ–Ω–¥–æ–Ω (51.5¬∞N, 0¬∞)', lat: 51.5, lng: 0 },
        { name: '–ú–æ—Å–∫–≤–∞ (55.75¬∞N, 37.6¬∞E)', lat: 55.75, lng: 37.6 },
        { name: '–ù—å—é-–ô–æ—Ä–∫ (40.7¬∞N, 74¬∞W)', lat: 40.7, lng: -74 },
        { name: '–¢–æ–∫–∏–æ (35.7¬∞N, 139.7¬∞E)', lat: 35.7, lng: 139.7 },
        { name: '–°–∏–¥–Ω–µ–π (33.9¬∞S, 151.2¬∞E)', lat: -33.9, lng: 151.2 }
    ];
    
    const radius = window.earthRadius || 15;
    testPoints.forEach(point => {
        const latRad = point.lat * (Math.PI / 180);
        const lngRad = -point.lng * (Math.PI / 180);  // –ò–ù–í–ï–†–¢–ò–†–£–ï–ú
        
        // –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê: -lng
        const pos = new THREE.Vector3(
            radius * Math.cos(latRad) * Math.cos(lngRad),
            radius * Math.sin(latRad),
            radius * Math.cos(latRad) * Math.sin(lngRad)
        );
        const verifyLat = Math.asin(pos.y / radius) * 180 / Math.PI;
        const verifyLng = -Math.atan2(pos.z, pos.x) * 180 / Math.PI;  // –û–±—Ä–∞—Ç–Ω–∞—è –∏–Ω–≤–µ—Ä—Å–∏—è
        
        console.log(`${point.name}:`);
        console.log(`  3D: X=${pos.x.toFixed(3)}, Y=${pos.y.toFixed(3)}, Z=${pos.z.toFixed(3)}`);
        console.log(`  Verify: ${verifyLat.toFixed(2)}¬∞, ${verifyLng.toFixed(2)}¬∞ ‚úì`);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
window.testCoordinates = testCoordinates;

// –í–∏–∑—É–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –æ—Ç–º–µ—Ç–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –≥–ª–æ–±—É—Å–µ
function showTestMarkers() {
    console.log('üó∫Ô∏è Adding test markers for known cities...');
    
    const testCities = [
        { name: 'London', lat: 51.5, lng: 0, color: 0x00ff00 },
        { name: 'Moscow', lat: 55.75, lng: 37.6, color: 0xff0000 },
        { name: 'New York', lat: 40.7, lng: -74, color: 0x0000ff },
        { name: 'Tokyo', lat: 35.7, lng: 139.7, color: 0xffff00 },
        { name: 'Sydney', lat: -33.9, lng: 151.2, color: 0xff00ff }
    ];
    
    testCities.forEach(city => {
        const radius = window.earthRadius || 15;
        const latRad = city.lat * (Math.PI / 180);
        const lngRad = -city.lng * (Math.PI / 180);  // –ò–ù–í–ï–†–¢–ò–†–£–ï–ú
        
        // –ò–ù–í–ï–†–¢–ò–†–û–í–ê–ù–ù–ê–Ø –§–û–†–ú–£–õ–ê: -lng
        const pos = new THREE.Vector3(
            radius * Math.cos(latRad) * Math.cos(lngRad),
            radius * Math.sin(latRad),
            radius * Math.cos(latRad) * Math.sin(lngRad)
        );
        
        const markerGeo = new THREE.SphereGeometry(0.4, 16, 16); // –£–≤–µ–ª–∏—á–µ–Ω —Ä–∞–∑–º–µ—Ä
        const markerMat = new THREE.MeshBasicMaterial({ color: city.color });
        const marker = new THREE.Mesh(markerGeo, markerMat);
        marker.position.copy(pos).normalize().multiplyScalar(radius + 0.4);
        marker.name = `test-marker-${city.name}`;
        earth.add(marker);
        
        console.log(`‚úì ${city.name} marker added at ${city.lat}¬∞, ${city.lng}¬∞`);
    });
    
    console.log('‚úÖ Test markers added! Check if they match real locations on the globe.');
}

// –£–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
function clearTestMarkers() {
    const markers = earth.children.filter(child => child.name && child.name.startsWith('test-marker-'));
    markers.forEach(marker => {
        earth.remove(marker);
        if (marker.geometry) marker.geometry.dispose();
        if (marker.material) marker.material.dispose();
    });
    console.log('üóëÔ∏è Test markers cleared');
}

window.showTestMarkers = showTestMarkers;
window.clearTestMarkers = clearTestMarkers;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∑–∞–ø—É—Å–∫—É
function checkReadyToStart() {
    const startButton = document.getElementById('start-simulation');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Å—Ç–µ—Ä–æ–∏–¥–∞ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —É–¥–∞—Ä–∞ (–º–∞—Ä–∫–µ—Ä —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–∞—Ä—Ç–µ, –Ω–µ –Ω–∞ –≥–ª–æ–±—É—Å–µ!)
    if (selectedAsteroid && impactLocation) {
        startButton.disabled = false;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
function updateMapMarker(lat, lng) {
    if (!window.mapInitialized) return;
    
    // –ü–û–ö–ê–ó–´–í–ê–ï–ú –≥–µ–æ–º–∞—Ä–∫–µ—Ä –ù–ê –ö–ê–†–¢–ï (–Ω–æ –Ω–µ –Ω–∞ –≥–ª–æ–±—É—Å–µ!)
    // Update marker on small map
    if (mapMarker) {
        mapMarker.setLatLng([lat, lng]);
    } else {
        mapMarker = L.marker([lat, lng], {
            icon: L.icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            })
        }).addTo(window.map);
        mapMarker.bindPopup('üéØ Impact Target').openPopup();
    }
    
    window.map.setView([lat, lng], 5);
    
    // Update marker on fullscreen map too
    if (window.mapFullscreen) {
        if (window.mapMarkerFullscreen) {
            window.mapMarkerFullscreen.setLatLng([lat, lng]);
        } else {
            window.mapMarkerFullscreen = L.marker([lat, lng], {
                icon: L.icon({
                    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
                    iconSize: [25, 41],
                    iconAnchor: [12, 41],
                    popupAnchor: [1, -34],
                    shadowSize: [41, 41]
                })
            }).addTo(window.mapFullscreen);
            window.mapMarkerFullscreen.bindPopup('üéØ Impact Target');
        }
        window.mapFullscreen.setView([lat, lng], 5);
    }
    
    console.log(`üó∫Ô∏è Map marker updated at: ${lat.toFixed(4)}¬∞, ${lng.toFixed(4)}¬∞ (visible on maps only)`);
}

// Toggle fall visualization
function toggleVisualization() {
    showFallVisualization = !showFallVisualization;
    const button = document.getElementById('toggle-visualization');
    
    if (showFallVisualization) {
        button.textContent = 'üî• Fall Visualization: ON';
        button.classList.add('active');
    } else {
        button.textContent = 'üî• Fall Visualization: OFF';
        button.classList.remove('active');
    }
}

// Add crater marker to map after impact
function addCraterToMap(lat, lng, craterDiameterKm) {
    if (!window.mapInitialized) return;
    
    console.log(`üó∫Ô∏è Adding crater to maps: ${craterDiameterKm.toFixed(2)} km at ${lat.toFixed(4)}¬∞, ${lng.toFixed(4)}¬∞`);
    
    // Create a circle to show crater on small map
    const craterCircle = L.circle([lat, lng], {
        color: '#ff0000',
        fillColor: '#8b0000',
        fillOpacity: 0.5,
        radius: (craterDiameterKm / 2) * 1000, // Convert km to meters for Leaflet
        weight: 2
    }).addTo(window.map);
    
    craterCircle.bindPopup(`<b>üï≥Ô∏è Impact Crater</b><br>Diameter: ${craterDiameterKm.toFixed(2)} km<br>Location: ${lat.toFixed(4)}¬∞, ${lng.toFixed(4)}¬∞`);
    
    // Add to fullscreen map too
    const craterCircleFullscreen = L.circle([lat, lng], {
        color: '#ff0000',
        fillColor: '#8b0000',
        fillOpacity: 0.5,
        radius: (craterDiameterKm / 2) * 1000,
        weight: 2
    }).addTo(window.mapFullscreen);
    
    craterCircleFullscreen.bindPopup(`<b>üï≥Ô∏è Impact Crater</b><br>Diameter: ${craterDiameterKm.toFixed(2)} km<br>Location: ${lat.toFixed(4)}¬∞, ${lng.toFixed(4)}¬∞`);
    
    // Store BOTH crater circles globally so they persist
    if (!window.craterMarkers) {
        window.craterMarkers = [];
    }
    window.craterMarkers.push(craterCircle);
    window.craterMarkers.push(craterCircleFullscreen);
    
    console.log(`‚úÖ Crater added to BOTH maps: ${craterDiameterKm.toFixed(2)} km at ${lat.toFixed(4)}¬∞, ${lng.toFixed(4)}¬∞`);
}

// Export for HTML event handlers
window.toggleVisualization = toggleVisualization;
window.addCraterToMap = addCraterToMap;
